<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable</Title>
      <Shortcut>va</Shortcut>
      <Description>array variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new $_type$[$_arrayLength$];$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable (with initializer)</Title>
      <Shortcut>vax</Shortcut>
      <Description>array variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_collectionIdentifier$ = new $_type$[] { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Attribute class</Title>
      <Shortcut>c_Attribute</Shortcut>
      <Description>class derived from Attribute class</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AttributeClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>allowMultiple</ID>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>base</ID>
          <ToolTip>The name of the base class</ToolTip>
          <Default>Attribute</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public sealed</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>The name of the attribute</ToolTip>
          <Default>My</Default>
        </Literal>
        <Literal>
          <ID>target</ID>
          <Default>.All</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[AttributeUsage(AttributeTargets$target$, AllowMultiple = $allowMultiple$)]
$modifier$ class $name$Attribute : $base$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Boolean variable</Title>
      <Shortcut>vb</Shortcut>
      <Description>Boolean variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BooleanVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[bool $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>braces</Title>
      <Shortcut>b</Shortcut>
      <Description>braces</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Braces</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[{
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>catch clause</Title>
      <Shortcut>catch</Shortcut>
      <Description>catch clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Catch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Exception variable name</ToolTip>
          <Default>ex</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[catch ($type$ $name$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Collection&lt;T&gt; class</Title>
      <Shortcut>c_CollectionOfT</Shortcut>
      <Description>class derived from Collection&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name CollectionOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : Collection<$type$> {
	public $name$() {
	}

	public $name$(IList<$type$> list) : base(list) {
	}

	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator</Title>
      <Shortcut>co</Shortcut>
      <Description>conditional operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (equal to null)</Title>
      <Shortcut>con</Shortcut>
      <Description>conditional operator with condition whether the expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ == null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (not equal to null)</Title>
      <Shortcut>coxn</Shortcut>
      <Description>conditional operator with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorNotEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[($expression$ != null) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DateTimeOffset type</Title>
      <Shortcut>dto</Shortcut>
      <Description>DateTimeOffset type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DateTimeOffsetType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[DateTimeOffset$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DateTime type</Title>
      <Shortcut>dt</Shortcut>
      <Description>DateTime type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DateTimeType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[DateTime$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Assert</Title>
      <Shortcut>da</Shortcut>
      <Description>Debug.Assert method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugAssert</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.Assert($expression$, $message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.WriteLine</Title>
      <Shortcut>dw</Shortcut>
      <Description>Debug.WriteLine method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugWriteLine</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>arguments</ID>
          <ToolTip>Method arguments</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.WriteLine($arguments$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>default keyword</Title>
      <Shortcut>d</Shortcut>
      <Description>default keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DefaultKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[default$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary&lt;TKey, TValue&gt; class</Title>
      <Shortcut>c_DictionaryOfTKeyTValue</Shortcut>
      <Description>class derived from Dictionary&lt;TKey, TValue&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DictionaryOfTKeyTValueClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Runtime.Serialization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>_valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>object</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Dictionary type name</ToolTip>
          <Default>Dictionary</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : Dictionary<$_keyType$, $_valueType$> {
	public $name$() : base() {
	}

	public $name$(int capacity) : base(capacity) {
	}

	public $name$(IEqualityComparer<$_keyType$> comparer) : base(comparer) {
	}

	public $name$(IDictionary<$_keyType$, $_valueType$> dictionary) : base(dictionary) {
	}

	public $name$(int capacity, IEqualityComparer<$_keyType$> comparer) : base(capacity, comparer) {
	}

	public $name$(SerializationInfo info, StreamingContext context) : base(info, context) {
	}

	public $name$(IDictionary<$_keyType$, $_valueType$> dictionary, IEqualityComparer<$_keyType$> comparer) : base(dictionary, comparer) {
	}

	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Disposable class</Title>
      <Shortcut>c_Disposable</Shortcut>
      <Description>class that implements IDisposable interface</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DisposableClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : IDisposable {
	private bool _disposed;

	public void Dispose() {
		Dispose(true);
		GC.SuppressFinalize(this);
	}

	protected virtual void Dispose(bool disposing) {
		if (!_disposed) {
			if (disposing) {
				throw new NotImplementedException();
			}

			_disposed = true;
		}
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>dispose pattern</Title>
      <Shortcut>dispose</Shortcut>
      <Description>dispose pattern</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Dispose</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[private bool _disposed;

public void Dispose() {
	Dispose(true);
	GC.SuppressFinalize(this);
}

protected virtual void Dispose(bool disposing) {
	if (!_disposed) {
		if (disposing) {
			throw new NotImplementedException();
		}

		_disposed = true;
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while not null</Title>
      <Shortcut>doxn</Shortcut>
      <Description>do statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DoWhileNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do {
	$end$

} while ($expression$ != null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do while null</Title>
      <Shortcut>don</Shortcut>
      <Description>do statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DoWhileNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[do {
	$end$

} while ($expression$ == null);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>else clause</Title>
      <Shortcut>e</Shortcut>
      <Description>else clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Else</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[else {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>else-if</Title>
      <Shortcut>eif</Shortcut>
      <Description>else-if statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ElseIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[else if ($expression$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Enumerator class</Title>
      <Shortcut>c_Enumerator</Shortcut>
      <Description>custom enumerator class</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumeratorClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Diagnostics.CodeAnalysis</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>elementType</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
        <Literal>
          <ID>variableName</ID>
          <ToolTip>Variable name</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[
  IEnumerator<$elementType$> IEnumerable<$elementType$>.GetEnumerator()
{
	return new EnumeratorImpl(this);
}

IEnumerator IEnumerable.GetEnumerator()
{
	return new EnumeratorImpl(this);
}

public Enumerator GetEnumerator()
{
	return new Enumerator(this);
}

[SuppressMessage("Performance", "CA1815")]
[SuppressMessage("Usage", "CA2231")]
public struct $end$Enumerator
{
	private $type$ _$variableName$;
	private $elementType$ _current;

	internal Enumerator($type$ $variableName$)
	{
		_$variableName$ = $variableName$;
		_current = null;
	}

	public bool MoveNext()
	{
		throw new NotImplementedException();
	}

	public $elementType$ Current
	{
		get { throw new NotImplementedException(); }
	}

	public void Reset()
	{
		_current = null;
	}

	public override bool Equals(object obj) => throw new NotSupportedException();

	public override int GetHashCode() => throw new NotSupportedException();
}

private class EnumeratorImpl : IEnumerator<$elementType$>
{
	private Enumerator _en;

	internal EnumeratorImpl($type$ $variableName$)
	{
		_en = new Enumerator($variableName$);
	}

	public $elementType$ Current => _en.Current;

	object IEnumerator.Current => _en.Current;

	public bool MoveNext() => _en.MoveNext();

	public void Reset() => _en.Reset();

	public void Dispose()
	{
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Equals and GetHashCode</Title>
      <Shortcut>equals</Shortcut>
      <Description>overriding Equals and GetHashCode methods</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EqualsAndGetHashCode</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public override bool Equals(object obj) {
	var other = obj as $thisName$;
	if (other == null) {
		return false;
	}

	$end$
	throw new NotImplementedException();
}

public override int GetHashCode() {
	throw new NotImplementedException();
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Equals and GetHashCode for value type</Title>
      <Shortcut>equals_ValueType</Shortcut>
      <Description>overriding Equals and GetHashCode methods for value type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EqualsAndGetHashCodeForValueType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public override bool Equals(object obj) {
	if(!(obj is $thisName$)) {
		return false;
	}

	var other = ($thisName$)obj;

	$end$
	throw new NotImplementedException();
}

public override int GetHashCode() {
	throw new NotImplementedException();
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>equal to null</Title>
      <Shortcut>n</Shortcut>
      <Description>equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$left$ == null$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Exception class</Title>
      <Shortcut>c_Exception</Shortcut>
      <Description>class derived from Exception class</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ExceptionClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Runtime.Serialization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>base</ID>
          <ToolTip>Base exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Exception name</ToolTip>
          <Default>My</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[Serializable]
$modifier$ class $name$Exception : $base$ {
	public $name$Exception() {
	}

	public $name$Exception(string message) : base(message) {
	}

	public $name$Exception(string message, Exception inner) : base(message, inner) {
	}

	protected $name$Exception(SerializationInfo info, StreamingContext context) : base(info, context) {
	}$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit cast operator</Title>
      <Shortcut>t</Shortcut>
      <Description>explicit cast operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ExplicitCastOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[(($type$)$expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>finally clause</Title>
      <Shortcut>finally</Shortcut>
      <Description>finally clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Finally</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[finally {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>for statement</Title>
      <Shortcut>fr</Shortcut>
      <Description>for statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name For</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[for (int $index$ = 0; $index$ < $length$; $index$++) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>foreach statement</Title>
      <Shortcut>fe</Shortcut>
      <Description>foreach statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForEach</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collection</ID>
          <ToolTip>Collection variable name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier that represents the element in the collection</ToolTip>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[foreach (var $identifier$ in $_collection$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>for statement (reversed)</Title>
      <Shortcut>frr</Shortcut>
      <Description>for statement (reversed)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForReversed</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[for (int $index$ = $length$ - 1; $index$ >= 0; $index$--) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>generic type constraint</Title>
      <Shortcut>where</Shortcut>
      <Description>generic type constraint</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name GenericTypeConstraint</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_typeParameter</ID>
          <ToolTip>Generic type parameter</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>constraint</ID>
          <ToolTip>Constraint</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[where $_typeParameter$ : $constraint$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IComparer class</Title>
      <Shortcut>c_IComparer</Shortcut>
      <Description>class that implements IComparer</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IComparerClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Comparer type name</ToolTip>
          <Default>Comparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : IComparer {
	public int Compare(object x, object y) {
		if (object.ReferenceEquals(x, y)) {
			return 0;
		}

		if (x == null) {
			return (y == null) ? 0 : -1;
		}

		if (y == null) {
			return 1;
		}

		var a = ($type$)x;
		var b = ($type$)y;

		$end$
		throw new NotImplementedException();
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IComparer&lt;T&gt; class</Title>
      <Shortcut>c_IComparerOfT</Shortcut>
      <Description>class that implements IComparer&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IComparerOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Comparer type name</ToolTip>
          <Default>Comparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : IComparer<$type$> {
	public int Compare($type$ x, $type$ y) {
		if (object.ReferenceEquals(x, y)) {
			return 0;
		}

		if (x == null) {
			return -1;
		}

		if (y == null) {
			return 1;
		}

		$end$
		throw new NotImplementedException();
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>IEnumerator&lt;T&gt; variable</Title>
      <Shortcut>u_er</Shortcut>
      <Description>IEnumerator&lt;T&gt; variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IEnumeratorOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Collection identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>enumerator</ID>
          <ToolTip>Enumerator identifier name</ToolTip>
          <Default>en</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $enumerator$ = $_collectionIdentifier$.GetEnumerator()) {
	while ($enumerator$.MoveNext()) {
		$end$
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IEqualityComparer class</Title>
      <Shortcut>c_IEqualityComparer</Shortcut>
      <Description>class that implements IEqualityComparer</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IEqualityComparerClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Equality comparer type name</ToolTip>
          <Default>EqualityComparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : IEqualityComparer {
	new public bool Equals(object x, object y) {
		if (object.ReferenceEquals(x, y)) {
			return true;
		}

		if (x == null || y == null) {
			return false;
		}

		var a = ($type$)x;
		var b = ($type$)y;

		$end$
		throw new NotImplementedException();
	}

	public int GetHashCode(object obj) {
		if (obj == null) {
			return 0;
		}

		throw new NotImplementedException();
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IEqualityComparer&lt;T&gt; class</Title>
      <Shortcut>c_IEqualityComparerOfT</Shortcut>
      <Description>class that implements IEqualityComparer&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IEqualityComparerOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Equality comparer type name</ToolTip>
          <Default>EqualityComparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : EqualityComparer<$type$> {
	public override bool Equals($type$ x, $type$ y) {
		if (object.ReferenceEquals(x, y)) {
			return true;
		}

		if (x == null || y == null) {
			return false;
		}

		$end$
		throw new NotImplementedException();
	}

	public override int GetHashCode($type$ obj) {
		if (obj == null) {
			return 0;
		}

		throw new NotImplementedException();
	}
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null</Title>
      <Shortcut>ifn</Shortcut>
      <Description>if equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ == null) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not</Title>
      <Shortcut>ifx</Shortcut>
      <Description>if with condition whether the expression is equal to false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNot</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null</Title>
      <Shortcut>ifxn</Shortcut>
      <Description>if not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ != null) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not TryParse</Title>
      <Shortcut>ifxtp</Shortcut>
      <Description>if statement with condition whether TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $result$;
if (!$_type$.TryParse($value$, out $result$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if TryParse</Title>
      <Shortcut>iftp</Shortcut>
      <Description>if statement with condition whether TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $result$;
if ($_type$.TryParse($value$, out $result$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Int32 variable</Title>
      <Shortcut>vi</Shortcut>
      <Description>Int32 variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Int32Variable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[int $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface event</Title>
      <Shortcut>_et</Shortcut>
      <Description>interface event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[event EventHandler $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface event with EventHandler&lt;T&gt;</Title>
      <Shortcut>_ett</Shortcut>
      <Description>interface event declaration with EventHandler&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceEventWithEventHandlerOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[event EventHandler<$eventArgs$> $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface indexer</Title>
      <Shortcut>_ir</Shortcut>
      <Description>interface indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Indexer parameter</ToolTip>
          <Default>int index</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ this[$parameter$] { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface method</Title>
      <Shortcut>_m</Shortcut>
      <Description>interface method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface property</Title>
      <Shortcut>_p</Shortcut>
      <Description>interface property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface read-only property</Title>
      <Shortcut>_rp</Shortcut>
      <Description>interface read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal auto property</Title>
      <Shortcut>ip</Shortcut>
      <Description>internal auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal auto property with private setter</Title>
      <Shortcut>ipps</Shortcut>
      <Description>internal auto-implemented property declaration with private setter</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalAutoPropertyWithPrivateSet</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ $name$ { get; private set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal class</Title>
      <Shortcut>ic</Shortcut>
      <Description>internal class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal const</Title>
      <Shortcut>ik</Shortcut>
      <Description>internal const declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>default(T)</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal const $_type$ $name$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal constructor</Title>
      <Shortcut>icr</Shortcut>
      <Description>internal constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $thisName$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal delegate</Title>
      <Shortcut>ide</Shortcut>
      <Description>internal delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal delegate $_type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal enum</Title>
      <Shortcut>iem</Shortcut>
      <Description>internal enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal enum $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal event</Title>
      <Shortcut>iet_EventHandler</Shortcut>
      <Description>internal event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal event EventHandler $name$;

protected virtual void On$name$(EventArgs e) {
	EventHandler handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal event with EventHandler&lt;T&gt;</Title>
      <Shortcut>iet_EventHandlerOfT</Shortcut>
      <Description>internal event declaration with EventHandler&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalEventWithEventHandlerOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal event EventHandler<$eventArgs$> $name$;

protected virtual void On$name$($eventArgs$ e) {
	EventHandler<$eventArgs$> handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal indexer</Title>
      <Shortcut>iir</Shortcut>
      <Description>internal indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ this[$parameters$] {
	get { $end$}
	set { }
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal interface</Title>
      <Shortcut>iie</Shortcut>
      <Description>internal interface declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalInterface</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Interface name</ToolTip>
          <Default>InterfaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal interface $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal method</Title>
      <Shortcut>im</Shortcut>
      <Description>internal method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal read-only auto property</Title>
      <Shortcut>irp</Shortcut>
      <Description>internal read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal read-only field</Title>
      <Shortcut>irf</Shortcut>
      <Description>internal read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal read-only indexer</Title>
      <Shortcut>irir</Shortcut>
      <Description>internal read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ this[$parameters$] {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal read-only property</Title>
      <Shortcut>irpp</Shortcut>
      <Description>internal read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal read-only struct</Title>
      <Shortcut>irst</Shortcut>
      <Description>internal read-only struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal readonly struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static class</Title>
      <Shortcut>isc</Shortcut>
      <Description>internal static class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal static class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static method</Title>
      <Shortcut>ism</Shortcut>
      <Description>internal static method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal static $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static read-only auto property</Title>
      <Shortcut>isrp</Shortcut>
      <Description>internal static read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal static $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static read-only field</Title>
      <Shortcut>isrf</Shortcut>
      <Description>internal static read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal static readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal static read-only property</Title>
      <Shortcut>isrpp</Shortcut>
      <Description>internal static read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal static $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal struct</Title>
      <Shortcut>ist</Shortcut>
      <Description>internal struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal virtual auto property</Title>
      <Shortcut>ivp</Shortcut>
      <Description>internal virtual auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal virtual $_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal virtual method</Title>
      <Shortcut>ivm</Shortcut>
      <Description>internal virtual method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal virtual $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal virtual read-only auto property</Title>
      <Shortcut>ivrp</Shortcut>
      <Description>internal virtual read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal virtual $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>internal virtual read-only property</Title>
      <Shortcut>ivrpp</Shortcut>
      <Description>internal virtual read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[internal virtual $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>KeyValuePair type</Title>
      <Shortcut>kvp</Shortcut>
      <Description>KeyValuePair type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name KeyValuePair</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[KeyValuePair$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression</Title>
      <Shortcut>l</Shortcut>
      <Description>lambda expression</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpression</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[f => $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression without parameters</Title>
      <Shortcut>l0</Shortcut>
      <Description>lambda expression without parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpressionWithoutParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[() => $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[(f, g) => $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>nameof operator</Title>
      <Shortcut>no</Shortcut>
      <Description>nameof operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NameOfOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Variable, type or member</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[nameof($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- new variable</Title>
      <Shortcut>vn</Shortcut>
      <Description>new variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>List of arguments</ToolTip>
          <Default>arguments</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = new $type$($_arguments$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- new variable (with initializer)</Title>
      <Shortcut>vnx</Shortcut>
      <Description>new variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>List of arguments</ToolTip>
          <Default>arguments</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = new $type$($_arguments$) { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>not equal to null</Title>
      <Shortcut>xn</Shortcut>
      <Description>not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NotEqualToNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$left$ != null$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>!string.IsNullOrEmpty</Title>
      <Shortcut>xsne</Shortcut>
      <Description>!string.IsNullOrEmpty method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[!string.IsNullOrEmpty($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>!string.IsNullOrWhiteSpace</Title>
      <Shortcut>xsnw</Shortcut>
      <Description>!string.IsNullOrWhiteSpace method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[!string.IsNullOrWhiteSpace($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>object keyword</Title>
      <Shortcut>o</Shortcut>
      <Description>object keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ObjectKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[object$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection&lt;T&gt; class</Title>
      <Shortcut>c_ObservableCollectionOfT</Shortcut>
      <Description>class derived from ObservableCollection&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ObservableCollectionOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : ObservableCollection<$type$> {
	public $name$() {
	}

	public $name$(IEnumerable<$type$> collection) : base(collection) {
	}

	public $name$(IList<$type$> list) : base(list) {
	}

	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&amp; operator overloading</Title>
      <Shortcut>oo_Ampersand</Shortcut>
      <Description>&amp; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorAmpersand</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator &($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>* operator overloading</Title>
      <Shortcut>oo_Asterisk</Shortcut>
      <Description>* operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorAsterisk</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator *($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>^ operator overloading</Title>
      <Shortcut>oo_Caret</Shortcut>
      <Description>^ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorCaret</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator ^($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>== operator overloading</Title>
      <Shortcut>oo_EqualsEquals</Shortcut>
      <Description>== operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorEquality</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator ==($thisName$ $left$, $thisName$ $right$) {
	$end$
}

public static bool operator !=($thisName$ $left$, $thisName$ $right$) {
	return !($left$ == $right$);
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>! operator overloading</Title>
      <Shortcut>oo_ExclamationMark</Shortcut>
      <Description>! operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorExclamationMark</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator !($thisName$ $operand$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit operator overloading</Title>
      <Shortcut>oo_Explicit</Shortcut>
      <Description>explicit operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorExplicit</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static explicit operator $thisName$($type$ $operand$) {
	$end$
}

public static explicit operator $type$($thisName$ $operand$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt; operator overloading</Title>
      <Shortcut>oo_GreaterThan</Shortcut>
      <Description>&gt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator <($thisName$ $left$, $thisName$ $right$) {
}

public static bool operator >($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt;&gt; operator overloading</Title>
      <Shortcut>oo_GreaterThanGreaterThan</Shortcut>
      <Description>&gt;&gt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThanGreaterThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>count</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator >>($thisName$ $left$, int $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt;= operator overloading</Title>
      <Shortcut>oo_GreaterThanEquals</Shortcut>
      <Description>&gt;= operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThanOrEqual</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator <=($thisName$ $left$, $thisName$ $right$) {
}

public static bool operator >=($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>implicit operator overloading</Title>
      <Shortcut>oo_Implicit</Shortcut>
      <Description>implicit operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorImplicit</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static implicit operator $thisName$($type$ $operand$) {
	$end$
}

public static implicit operator $type$($thisName$ $operand$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt; operator overloading</Title>
      <Shortcut>oo_LessThan</Shortcut>
      <Description>&lt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator <($thisName$ $left$, $thisName$ $right$) {
	$end$
}

public static bool operator >($thisName$ $left$, $thisName$ $right$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt;&lt; operator overloading</Title>
      <Shortcut>oo_LessThanLessThan</Shortcut>
      <Description>&lt;&lt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThanLessThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>count</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator <<($thisName$ $left$, int $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt;= operator overloading</Title>
      <Shortcut>oo_LessThanEquals</Shortcut>
      <Description>&lt;= operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThanOrEqual</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator <=($thisName$ $left$, $thisName$ $right$) {
	$end$
}

public static bool operator >=($thisName$ $left$, $thisName$ $right$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- operator overloading</Title>
      <Shortcut>oo_Minus</Shortcut>
      <Description>- operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorMinus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator -($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>-- operator overloading</Title>
      <Shortcut>oo_MinusMinus</Shortcut>
      <Description>-- operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorMinusMinus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator --($thisName$ $operand$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>% operator overloading</Title>
      <Shortcut>oo_Percent</Shortcut>
      <Description>% operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorPercent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator %($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>+ operator overloading</Title>
      <Shortcut>oo_Plus</Shortcut>
      <Description>+ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorPlus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator +($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>++ operator overloading</Title>
      <Shortcut>oo_PlusPlus</Shortcut>
      <Description>++ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorPlusPlus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator ++($thisName$ $operand$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>/ operator overloading</Title>
      <Shortcut>oo_Slash</Shortcut>
      <Description>/ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorSlash</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator /($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>~ operator overloading</Title>
      <Shortcut>oo_Tilde</Shortcut>
      <Description>~ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorTilde</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator ~($thisName$ $operand$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>true-false operator overloading</Title>
      <Shortcut>oo_TrueFalse</Shortcut>
      <Description>true-false operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorTrueFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static bool operator true($thisName$ $operand$) {
	$end$
}

public static bool operator false($thisName$ $operand$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>| operator overloading</Title>
      <Shortcut>oo_VerticalBar</Shortcut>
      <Description>| operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorVerticalBar</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $thisName$ operator |($thisName$ $left$, $thisName$ $right$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>parameter array </Title>
      <Shortcut>pa</Shortcut>
      <Description>parameter array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ParameterArray</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[params $_type$[]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#if directive</Title>
      <Shortcut>ppif</Shortcut>
      <Description>#if preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>symbol</ID>
          <ToolTip>Symbol to evaluate</ToolTip>
          <Default>DEBUG</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[#if $symbol$
	$selected$$end$
#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#if-#else directive</Title>
      <Shortcut>ppife</Shortcut>
      <Description>#if-#else preprocessor directives</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIfElse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>symbol</ID>
          <ToolTip>Symbol to evaluate</ToolTip>
          <Default>DEBUG</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[#if $symbol$
	$selected$$end$
#else

#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#region directive</Title>
      <Shortcut>ppr</Shortcut>
      <Description>#region preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveRegion</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Region name</ToolTip>
          <Default>RegionName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[#region $name$
	$selected$$end$
#endregion]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private auto property</Title>
      <Shortcut>pp</Shortcut>
      <Description>private auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private auto property with private setter</Title>
      <Shortcut>ppps</Shortcut>
      <Description>private auto-implemented property declaration with private setter</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateAutoPropertyWithPrivateSet</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$ { get; private set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private class</Title>
      <Shortcut>pc</Shortcut>
      <Description>private class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private const</Title>
      <Shortcut>pk</Shortcut>
      <Description>private const declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>default(T)</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private const $_type$ $name$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private constructor</Title>
      <Shortcut>pcr</Shortcut>
      <Description>private constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $thisName$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private delegate</Title>
      <Shortcut>pde</Shortcut>
      <Description>private delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private delegate $_type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private enum</Title>
      <Shortcut>pem</Shortcut>
      <Description>private enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private enum $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private event</Title>
      <Shortcut>pet_EventHandler</Shortcut>
      <Description>private event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private event EventHandler $name$;

protected virtual void On$name$(EventArgs e) {
	EventHandler handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private event with EventHandler&lt;T&gt;</Title>
      <Shortcut>pet_EventHandlerOfT</Shortcut>
      <Description>private event declaration with EventHandler&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateEventWithEventHandlerOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private event EventHandler<$eventArgs$> $name$;

protected virtual void On$name$($eventArgs$ e) {
	EventHandler<$eventArgs$> handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private field</Title>
      <Shortcut>pf</Shortcut>
      <Description>private field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private indexer</Title>
      <Shortcut>pir</Shortcut>
      <Description>private indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ this[$parameters$] {
	get { $end$}
	set { }
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private method</Title>
      <Shortcut>pm</Shortcut>
      <Description>private method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private read-only auto property</Title>
      <Shortcut>prp</Shortcut>
      <Description>private read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private read-only field</Title>
      <Shortcut>prf</Shortcut>
      <Description>private read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private read-only indexer</Title>
      <Shortcut>prir</Shortcut>
      <Description>private read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ this[$parameters$] {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private read-only property</Title>
      <Shortcut>prpp</Shortcut>
      <Description>private read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private read-only struct</Title>
      <Shortcut>prst</Shortcut>
      <Description>private read-only struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private readonly struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static class</Title>
      <Shortcut>psc</Shortcut>
      <Description>private static class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static field</Title>
      <Shortcut>psf</Shortcut>
      <Description>private static field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static method</Title>
      <Shortcut>psm</Shortcut>
      <Description>private static method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static read-only auto property</Title>
      <Shortcut>psrp</Shortcut>
      <Description>private static read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static read-only field</Title>
      <Shortcut>psrf</Shortcut>
      <Description>private static read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private static read-only property</Title>
      <Shortcut>psrpp</Shortcut>
      <Description>private static read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private static $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>private struct</Title>
      <Shortcut>pst</Shortcut>
      <Description>private struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[private struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public auto property</Title>
      <Shortcut>p</Shortcut>
      <Description>public auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public auto property with private setter</Title>
      <Shortcut>pps</Shortcut>
      <Description>public auto-implemented property declaration with private setter</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicAutoPropertyWithPrivateSet</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$ { get; private set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public class</Title>
      <Shortcut>c</Shortcut>
      <Description>public class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public const</Title>
      <Shortcut>k</Shortcut>
      <Description>public const declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>default(T)</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public const $_type$ $name$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public constructor</Title>
      <Shortcut>cr</Shortcut>
      <Description>public constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $thisName$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public delegate</Title>
      <Shortcut>de</Shortcut>
      <Description>public delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public delegate $_type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public enum</Title>
      <Shortcut>em</Shortcut>
      <Description>public enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public enum $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public event</Title>
      <Shortcut>et_EventHandler</Shortcut>
      <Description>public event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public event EventHandler $name$;

protected virtual void On$name$(EventArgs e) {
	EventHandler handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public event with EventHandler&lt;T&gt;</Title>
      <Shortcut>et_EventHandlerOfT</Shortcut>
      <Description>public event declaration with EventHandler&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicEventWithEventHandlerOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public event EventHandler<$eventArgs$> $name$;

protected virtual void On$name$($eventArgs$ e) {
	EventHandler<$eventArgs$> handler = $name$;
	if (handler != null) {
		handler(this, e);
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public field</Title>
      <Shortcut>f</Shortcut>
      <Description>public field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public indexer</Title>
      <Shortcut>ir</Shortcut>
      <Description>public indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ this[$parameters$] {
	get { $end$}
	set { }
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public interface</Title>
      <Shortcut>ie</Shortcut>
      <Description>public interface declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicInterface</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Interface name</ToolTip>
          <Default>InterfaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public interface $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public method</Title>
      <Shortcut>m</Shortcut>
      <Description>public method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public read-only auto property</Title>
      <Shortcut>rp</Shortcut>
      <Description>public read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public read-only field</Title>
      <Shortcut>rf</Shortcut>
      <Description>public read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public read-only indexer</Title>
      <Shortcut>rir</Shortcut>
      <Description>public read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>int index</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ this[$parameters$] {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public read-only property</Title>
      <Shortcut>rpp</Shortcut>
      <Description>public read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public read-only struct</Title>
      <Shortcut>rst</Shortcut>
      <Description>public read-only struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public readonly struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static class</Title>
      <Shortcut>sc</Shortcut>
      <Description>public static class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static class $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static field</Title>
      <Shortcut>sf</Shortcut>
      <Description>public static field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static method</Title>
      <Shortcut>sm</Shortcut>
      <Description>public static method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static read-only auto property</Title>
      <Shortcut>srp</Shortcut>
      <Description>public static read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static read-only field</Title>
      <Shortcut>srf</Shortcut>
      <Description>public static read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static readonly $_type$ $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public static read-only property</Title>
      <Shortcut>srpp</Shortcut>
      <Description>public static read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public static $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public struct</Title>
      <Shortcut>st</Shortcut>
      <Description>public struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public struct $name$ {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public virtual auto property</Title>
      <Shortcut>vp</Shortcut>
      <Description>public virtual auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public virtual $_type$ $name$ { get; set; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public virtual method</Title>
      <Shortcut>vm</Shortcut>
      <Description>public virtual method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public virtual $_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public virtual read-only auto property</Title>
      <Shortcut>vrp</Shortcut>
      <Description>public virtual read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public virtual $_type$ $name$ { get; }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>public virtual read-only property</Title>
      <Shortcut>vrpp</Shortcut>
      <Description>public virtual read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to return</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[public virtual $_type$ $name$ {
	get { return $value$; }
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ReadOnlyCollection&lt;T&gt; class</Title>
      <Shortcut>c_ReadOnlyCollectionOfT</Shortcut>
      <Description>class derived from ReadOnlyCollection&lt;T&gt;</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReadOnlyCollectionOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Generic type</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ : ReadOnlyCollection<$type$> {
	public $name$(IList<$type$> list) : base(list) {
	}

	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return false</Title>
      <Shortcut>ref</Shortcut>
      <Description>return false statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return keyword</Title>
      <Shortcut>r</Shortcut>
      <Description>return keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return null</Title>
      <Shortcut>ren</Shortcut>
      <Description>return null statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return null;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return true</Title>
      <Shortcut>ret</Shortcut>
      <Description>return true statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Singleton class</Title>
      <Shortcut>c_Singleton</Shortcut>
      <Description>class that implements singleton pattern</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name SingletonClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>public sealed</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$modifier$ class $name$ {
	private static readonly $name$ _instance = $value$;

	private $name$() {
	}

	public static $name$ Instance {
		get { return _instance; }
	}
}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constructor</Title>
      <Shortcut>scr</Shortcut>
      <Description>static constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[static $thisName$() {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>StreamReader Variable</Title>
      <Shortcut>u_smrr</Shortcut>
      <Description>StreamReader variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StreamReaderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sr</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Constructor parameters</ToolTip>
          <Default>stream</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new StreamReader($parameters$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>StreamWriter Variable</Title>
      <Shortcut>u_smwr</Shortcut>
      <Description>StreamWriter variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StreamWriterVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_encoding</ID>
          <ToolTip>File encoding</ToolTip>
          <Default>Encoding.UTF8</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sw</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Constructor parameters</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new StreamWriter($parameters$, $_encoding$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>string.IsNullOrEmpty</Title>
      <Shortcut>sne</Shortcut>
      <Description>string.IsNullOrEmpty method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[string.IsNullOrEmpty($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>string.IsNullOrWhiteSpace</Title>
      <Shortcut>snw</Shortcut>
      <Description>string.IsNullOrWhiteSpace method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[string.IsNullOrWhiteSpace($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>string keyword</Title>
      <Shortcut>s</Shortcut>
      <Description>string keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[string$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>StringReader Variable</Title>
      <Shortcut>u_srr</Shortcut>
      <Description>StringReader variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringReaderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sr</Default>
        </Literal>
        <Literal>
          <ID>string</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new StringReader($string$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String variable</Title>
      <Shortcut>vs</Shortcut>
      <Description>String variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[string $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>StringWriter Variable</Title>
      <Shortcut>u_swr</Shortcut>
      <Description>StringWriter variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringWriterVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.IO</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sw</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = new StringWriter()) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>switch statement</Title>
      <Shortcut>sh</Shortcut>
      <Description>switch statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Switch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to switch on</ToolTip>
          <Default>SwitchOn</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[switch ($expression$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new</Title>
      <Shortcut>twn</Shortcut>
      <Description>throw new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[throw new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new ArgumentException</Title>
      <Shortcut>twn_ae</Shortcut>
      <Description>throw new ArgumentException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new ArgumentException($message$, nameof($parameter$));$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new ArgumentNullException</Title>
      <Shortcut>twn_ane</Shortcut>
      <Description>throw new ArgumentNullException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentNullException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new ArgumentNullException(nameof($parameter$));$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new ArgumentOutOfRangeException</Title>
      <Shortcut>twn_aoore</Shortcut>
      <Description>throw new ArgumentOutOfRangeException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentOutOfRangeException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new ArgumentOutOfRangeException(nameof($parameter$), $parameter$, $message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new InvalidCastException</Title>
      <Shortcut>twn_ice</Shortcut>
      <Description>throw new InvalidCastException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewInvalidCastException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new InvalidCastException($message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new InvalidOperationException</Title>
      <Shortcut>twn_ioe</Shortcut>
      <Description>throw new InvalidOperationException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewInvalidOperationException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new InvalidOperationException($_exceptionMessage$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new NotImplementedException</Title>
      <Shortcut>twn_nie</Shortcut>
      <Description>throw new NotImplementedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewNotImplementedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new NotImplementedException($_exceptionMessage$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new NotSupportedException</Title>
      <Shortcut>twn_nse</Shortcut>
      <Description>throw new NotSupportedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewNotSupportedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new NotSupportedException($_exceptionMessage$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw new ObjectDisposedException</Title>
      <Shortcut>twn_ode</Shortcut>
      <Description>throw new ObjectDisposedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewObjectDisposedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>Arguments</ToolTip>
          <Default>args</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[throw new ObjectDisposedException($_arguments$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TODO comment</Title>
      <Shortcut>td</Shortcut>
      <Description>TODO comment</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TodoComment</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[//TODO: $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>try-catch</Title>
      <Shortcut>tc</Shortcut>
      <Description>try-catch statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryCatch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>exceptionType</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ex</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[try {
	$selected$$end$
}
catch ($exceptionType$ $identifier$) {
	throw;
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>try-catch-finally</Title>
      <Shortcut>tcf</Shortcut>
      <Description>try-catch-finally statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryCatchFinally</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>exceptionType</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ex</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[try {
	$selected$$end$
}
catch ($exceptionType$ $identifier$) {
	throw;
}
finally {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>try-finally</Title>
      <Shortcut>tf</Shortcut>
      <Description>try-finally statement with</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryFinally</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[try {
	$selected$$end$
}
finally {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>typeof operator</Title>
      <Shortcut>to</Shortcut>
      <Description>typeof operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TypeOfOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>object</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[typeof($_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title> type parameter</Title>
      <Shortcut>g</Shortcut>
      <Description> type parameter</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TypeParameter</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type parameter</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[<$_type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>using statement</Title>
      <Shortcut>u</Shortcut>
      <Description>using statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Using</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>disposable</ID>
          <ToolTip>A resouce to use</ToolTip>
          <Default>disposable</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using ($disposable$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>using static directive</Title>
      <Shortcut>us</Shortcut>
      <Description>using static directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UsingStatic</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[using static$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>using variable</Title>
      <Shortcut>u_v</Shortcut>
      <Description>using variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UsingVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>_</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $_identifier$ = $_value$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>local variable declaration</Title>
      <Shortcut>v</Shortcut>
      <Description>local variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Variable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>_</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>local variable declaration with explicit cast operator</Title>
      <Shortcut>vt</Shortcut>
      <Description>local variable declaration with explicit cast operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VariableWithExplicitCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>_</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = ($_type$)$expression$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while statement</Title>
      <Shortcut>we</Shortcut>
      <Description>while statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name While</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while not null</Title>
      <Shortcut>wexn</Shortcut>
      <Description>while statement with condition whether an expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name WhileNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ != null) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while null</Title>
      <Shortcut>wen</Shortcut>
      <Description>while statement with condition whether an expression is equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name WhileNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[while ($expression$ == null) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>XmlReader Variable</Title>
      <Shortcut>u_xmlrr</Shortcut>
      <Description>XmlReader variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name XmlReaderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Xml</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>argument</ID>
          <ToolTip>Argument(s)</ToolTip>
          <Default>argument</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>reader</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = XmlReader.Create($argument$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>XmlWriter Variable</Title>
      <Shortcut>u_xmlwr</Shortcut>
      <Description>XmlWriter variable declaration.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name XmlWriterVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Xml</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>argument</ID>
          <ToolTip>Argument(s)</ToolTip>
          <Default>argument</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>writer</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[using (var $identifier$ = XmlWriter.Create($argument$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield break statement</Title>
      <Shortcut>yb</Shortcut>
      <Description>yield break statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name YieldBreak</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[yield break;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return statement</Title>
      <Shortcut>yr</Shortcut>
      <Description>yield return statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name YieldReturn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[yield return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>