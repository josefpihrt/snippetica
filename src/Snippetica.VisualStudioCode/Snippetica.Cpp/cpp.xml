<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable</Title>
      <Shortcut>va</Shortcut>
      <Description>array variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>1</Default>
        </Literal>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$_type$ $_collectionIdentifier$[$_arrayLength$];$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable (with initialization)</Title>
      <Shortcut>vax</Shortcut>
      <Description>array variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>1</Default>
        </Literal>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$type$ $_collectionIdentifier$[$_arrayLength$] = { $_value$ };$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>attribute</Title>
      <Shortcut>a</Shortcut>
      <Description>attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Attribute</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>attribute</ID>
          <ToolTip>Attribute</ToolTip>
          <Default>attribute</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[[[$attribute$$selected$]]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>braces</Title>
      <Shortcut>b</Shortcut>
      <Description>braces</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Braces</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[{
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>catch</Title>
      <Shortcut>catch</Shortcut>
      <Description>catch clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Catch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>e</Default>
        </Literal>
        <Literal>
          <ID>exception</ID>
          <ToolTip>Exception name</ToolTip>
          <Default>std::exception</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[catch (const $exception$& $_identifier$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>class declaration</Title>
      <Shortcut>c</Shortcut>
      <Description>class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ClassDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[class $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>class definition</Title>
      <Shortcut>cx</Shortcut>
      <Description>class definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ClassDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[class $name$ {
public:
	$name$();
	~$name$();

private:
	$selected$$end$
};

$name$::$name$() {
}

$name$::~$name$() {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator</Title>
      <Shortcut>cop</Shortcut>
      <Description>conditional operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>condition</ID>
          <ToolTip>Condition to evaluate</ToolTip>
          <Default>condition</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>When false</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>When true</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$condition$ ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const cast</Title>
      <Shortcut>cca</Shortcut>
      <Description>const cast</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const_cast<$type$>($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const class</Title>
      <Shortcut>cc</Shortcut>
      <Description>const class definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const class $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constexpr function declaration</Title>
      <Shortcut>cef</Shortcut>
      <Description>constexpr function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstExprFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[constexpr $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constexpr function definition</Title>
      <Shortcut>cefx</Shortcut>
      <Description>constexpr function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstExprFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[constexpr $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constexpr keyword</Title>
      <Shortcut>ce</Shortcut>
      <Description>constexpr keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstExprKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[constexpr$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constexpr variable</Title>
      <Shortcut>cev</Shortcut>
      <Description>constexpr  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstExprVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[constexpr $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constexpr variable (with initialization)</Title>
      <Shortcut>cevx</Shortcut>
      <Description>constexpr  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstExprVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[constexpr $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const function declaration</Title>
      <Shortcut>cf</Shortcut>
      <Description>const function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const function definition</Title>
      <Shortcut>cfx</Shortcut>
      <Description>const function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constructor declaration</Title>
      <Shortcut>co</Shortcut>
      <Description>constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstructorDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>constructor definition</Title>
      <Shortcut>cox</Shortcut>
      <Description>constructor definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstructorDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$($_parameters$) {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const struct</Title>
      <Shortcut>cst</Shortcut>
      <Description>const struct definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Struct name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const struct $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const variable</Title>
      <Shortcut>cv</Shortcut>
      <Description>const  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>const variable (with initialization)</Title>
      <Shortcut>cvx</Shortcut>
      <Description>const  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConstVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[const $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>copy constructor declaration</Title>
      <Shortcut>cco</Shortcut>
      <Description>copy constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name CopyConstructorDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$(const $typeName$& $parameter$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>copy constructor definition</Title>
      <Shortcut>ccox</Shortcut>
      <Description>copy constructor definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name CopyConstructorDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$(const $typeName$& $parameter$) {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>decltype keyword</Title>
      <Shortcut>dt</Shortcut>
      <Description>decltype keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DeclTypeKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[decltype$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>default keyword</Title>
      <Shortcut>d</Shortcut>
      <Description>default keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DefaultKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[default$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>destructor declaration</Title>
      <Shortcut>de</Shortcut>
      <Description>destructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DestructorDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[~$typeName$();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>destructor definition</Title>
      <Shortcut>dex</Shortcut>
      <Description>destructor definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DestructorDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[~$typeName$() {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do-while</Title>
      <Shortcut>do</Shortcut>
      <Description>do-while statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DoWhile</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[do {
	$selected$$end$
} while ($expression$);]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>do-while [Obsolete]</Title>
      <Shortcut>dw</Shortcut>
      <Description>do-while statement [Obsolete]</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DoWhile_Obsolete</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[/* Shortcut 'dw' is obsolete, use 'do' instead. */$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>dynamic cast</Title>
      <Shortcut>dca</Shortcut>
      <Description>dynamic cast</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DynamicCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[dynamic_cast<$type$>($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>else</Title>
      <Shortcut>e</Shortcut>
      <Description>else statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Else</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[else {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>else-if</Title>
      <Shortcut>eif</Shortcut>
      <Description>else-if</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ElseIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[else if ($expression$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum class declaration</Title>
      <Shortcut>enc</Shortcut>
      <Description>enum class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumClassDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum class name</ToolTip>
          <Default>EnumClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum class $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum class definition</Title>
      <Shortcut>encx</Shortcut>
      <Description>enum class definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumClassDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum class name</ToolTip>
          <Default>EnumClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum class $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum declaration</Title>
      <Shortcut>en</Shortcut>
      <Description>enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum definition</Title>
      <Shortcut>enx</Shortcut>
      <Description>enum definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum struct declaration</Title>
      <Shortcut>enst</Shortcut>
      <Description>enum struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumStructDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum struct name</ToolTip>
          <Default>EnumStructName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum struct $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>enum struct definition</Title>
      <Shortcut>enstx</Shortcut>
      <Description>enum struct definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EnumStructDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Enum struct name</ToolTip>
          <Default>EnumStructName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[enum struct $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit constructor declaration</Title>
      <Shortcut>eco</Shortcut>
      <Description>explicit constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ExplicitConstructorDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[explicit $typeName$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit constructor definition</Title>
      <Shortcut>ecox</Shortcut>
      <Description>explicit constructor definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ExplicitConstructorDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[explicit $typeName$($_parameters$) {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>for</Title>
      <Shortcut>fr</Shortcut>
      <Description>for statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name For</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>max</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Control variable type</ToolTip>
          <Default>size_t</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[for ($type$ $index$ = 0; $index$ < $max$; $index$++) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>for (range-based)</Title>
      <Shortcut>frrb</Shortcut>
      <Description>range-based for statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForRangeBased</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>range</ID>
          <ToolTip>Range</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>variable</ID>
          <ToolTip>Variable</ToolTip>
          <Default>i</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[for (auto& $variable$ : $range$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>for (reversed)</Title>
      <Shortcut>frr</Shortcut>
      <Description>for statement (reversed)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForReversed</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>max</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[for (int $index$ = $max$ - 1; $index$ >= 0; $index$--) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>function declaration</Title>
      <Shortcut>f</Shortcut>
      <Description>function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name FunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>function definition</Title>
      <Shortcut>fx</Shortcut>
      <Description>function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name FunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if</Title>
      <Shortcut>if</Shortcut>
      <Description>if statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name If</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[if ($expression$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if constexpr</Title>
      <Shortcut>ifce</Shortcut>
      <Description>if constexpr statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfConstExpr</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[if constexpr ($expression$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline const function definition</Title>
      <Shortcut>ilcfx</Shortcut>
      <Description>inline const function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineConstFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline const $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline const variable</Title>
      <Shortcut>ilcv</Shortcut>
      <Description>inline const  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineConstVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline const $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline const variable (with initialization)</Title>
      <Shortcut>ilcvx</Shortcut>
      <Description>inline const  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineConstVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline const $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline function definition</Title>
      <Shortcut>ilfx</Shortcut>
      <Description>inline function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline keyword</Title>
      <Shortcut>il</Shortcut>
      <Description>inline keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[inline$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline namespace</Title>
      <Shortcut>ina</Shortcut>
      <Description>inline namespace definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineNamespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline namespace $name$ {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline variable</Title>
      <Shortcut>ilv</Shortcut>
      <Description>inline  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>inline variable (with initialization)</Title>
      <Shortcut>ilvx</Shortcut>
      <Description>inline  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InlineVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[inline $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>interface</Title>
      <Shortcut>i</Shortcut>
      <Description>interface definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Interface</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Interface name</ToolTip>
          <Default>InterfaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[__interface $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression</Title>
      <Shortcut>l</Shortcut>
      <Description>lambda expression</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpression</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>captures</ID>
          <ToolTip>List of captures</ToolTip>
          <Default>&amp;</Default>
        </Literal>
        <Literal>
          <ID>returnType</ID>
          <ToolTip>Return type</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[[$captures$]($_parameters$) -> $returnType$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>move constructor declaration</Title>
      <Shortcut>mco</Shortcut>
      <Description>move constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name MoveConstructorDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[
      $typeName$($typeName$&& $parameter$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>move constructor definition</Title>
      <Shortcut>mcox</Shortcut>
      <Description>move constructor definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name MoveConstructorDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[
      $typeName$($typeName$&& $parameter$) {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>multi-line comment</Title>
      <Shortcut>mc</Shortcut>
      <Description>multi-line comment</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name MultilineComment</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>comment</ID>
          <ToolTip>Comment</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[/*$comment$$selected$*/$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>namespace</Title>
      <Shortcut>na</Shortcut>
      <Description>namespace definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Namespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[namespace $name$ {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>nullptr keyword</Title>
      <Shortcut>np</Shortcut>
      <Description>nullptr keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NullPtrKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[nullptr$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>= copy assignment operator</Title>
      <Shortcut>oo_CopyAssignment</Shortcut>
      <Description>copy assignment operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorCopyAssignment</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>other</ID>
          <ToolTip>Other</ToolTip>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$& operator=($typeName$ $other$) {
	$selected$$end$
	return *this;
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>= copy assignment operator (with const)</Title>
      <Shortcut>oo_CopyAssignmentWithConst</Shortcut>
      <Description>copy assignment operator (with const)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorCopyAssignmentWithConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>other</ID>
          <ToolTip>Other</ToolTip>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$& operator=(const $typeName$& $other$) {
	$selected$$end$
	return *this;
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit operator</Title>
      <Shortcut>oo_Explicit</Shortcut>
      <Description>explicit operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorExplicit</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[explicit operator $type$() {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>explicit operator (with const)</Title>
      <Shortcut>oo_ExplicitWithConst</Shortcut>
      <Description>explicit operator (with const)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorExplicitWithConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[explicit operator $type$() const {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>implicit operator</Title>
      <Shortcut>oo_Implicit</Shortcut>
      <Description>implicit operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorImplicit</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[operator $type$() {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>implicit operator (with const)</Title>
      <Shortcut>oo_ImplicitWithConst</Shortcut>
      <Description>implicit operator (with const)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorImplicitWithConst</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[operator $type$() const {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>= move assignment operator</Title>
      <Shortcut>oo_MoveAssignment</Shortcut>
      <Description>move assignment operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorMoveAssignment</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>other</ID>
          <ToolTip>Other</ToolTip>
          <Default>other</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>TypeName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$typeName$& operator=($typeName$&& $other$) {
	$selected$$end$
	return *this;
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#define</Title>
      <Shortcut>ppd</Shortcut>
      <Description>#define preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveDefine</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>Identifier</ToolTip>
          <Default>X</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#define $id$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#error</Title>
      <Shortcut>ppe</Shortcut>
      <Description>#error preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveError</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Error message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#error $message$$selected$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#if</Title>
      <Shortcut>ppif</Shortcut>
      <Description>#if preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#if $expression$
	$selected$$end$
#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#ifdef</Title>
      <Shortcut>ppifd</Shortcut>
      <Description>#ifdef preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIfdef</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#ifdef $expression$
	$selected$$end$
#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#if #else</Title>
      <Shortcut>ppife</Shortcut>
      <Description>#if #else preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIfElse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#if $expression$
	$selected$$end$
#else
#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#ifndef</Title>
      <Shortcut>ppifnd</Shortcut>
      <Description>#ifndef preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIfndef</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#ifndef $expression$
	$selected$$end$
#endif]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#include</Title>
      <Shortcut>ppi</Shortcut>
      <Description>#include preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveInclude</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>path</ID>
          <ToolTip>File path</ToolTip>
          <Default>path</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#include <$path$$selected$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#line</Title>
      <Shortcut>ppl</Shortcut>
      <Description>#line preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveLine</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>file</ID>
          <ToolTip>File name</ToolTip>
          <Default>file</Default>
        </Literal>
        <Literal>
          <ID>number</ID>
          <ToolTip>Line number</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#line $number$ $file$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#pragma region</Title>
      <Shortcut>ppr</Shortcut>
      <Description>#pragma region preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveRegion</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Region name</ToolTip>
          <Default>RegionName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#pragma region $name$
	$selected$$end$
#pragma endregion $name$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#undef</Title>
      <Shortcut>ppud</Shortcut>
      <Description>#undef preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveUndef</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>Identifier</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#undef $id$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#using</Title>
      <Shortcut>ppu</Shortcut>
      <Description>#using preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveUsing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>file</ID>
          <ToolTip>File name</ToolTip>
          <Default>file</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[#using $file$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>pure virtual function</Title>
      <Shortcut>pvf</Shortcut>
      <Description>pure virtual function</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PureVirtualFunction</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[virtual $type$ $name$($_parameters$) = 0;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>reinterpret cast</Title>
      <Shortcut>rca</Shortcut>
      <Description>reinterpret cast</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReinterpretCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[reinterpret_cast<$type$>($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return keyword</Title>
      <Shortcut>r</Shortcut>
      <Description>return keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>sizeof keyword</Title>
      <Shortcut>so</Shortcut>
      <Description>sizeof keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name SizeOfKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[sizeof$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static assert</Title>
      <Shortcut>sa</Shortcut>
      <Description>static assert</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticAssert</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static_assert($expression$$selected$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static cast</Title>
      <Shortcut>sca</Shortcut>
      <Description>static cast</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static_cast<$type$>($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constexpr function declaration</Title>
      <Shortcut>scef</Shortcut>
      <Description>static constexpr function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstExprFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static constexpr $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constexpr function definition</Title>
      <Shortcut>scefx</Shortcut>
      <Description>static constexpr function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstExprFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static constexpr $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constexpr variable</Title>
      <Shortcut>scev</Shortcut>
      <Description>static constexpr  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstExprVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static constexpr $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constexpr variable (with initialization)</Title>
      <Shortcut>scevx</Shortcut>
      <Description>static constexpr  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstExprVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static constexpr $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static const function declaration</Title>
      <Shortcut>scf</Shortcut>
      <Description>static const function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static const $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static const function definition</Title>
      <Shortcut>scfx</Shortcut>
      <Description>static const function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static const $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static const variable</Title>
      <Shortcut>scv</Shortcut>
      <Description>static const  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static const $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static const variable (with initialization)</Title>
      <Shortcut>scvx</Shortcut>
      <Description>static const  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static const $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static function declaration</Title>
      <Shortcut>sf</Shortcut>
      <Description>static function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static function definition</Title>
      <Shortcut>sfx</Shortcut>
      <Description>static function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline const function definition</Title>
      <Shortcut>silcfx</Shortcut>
      <Description>static inline const function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineConstFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline const $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline const variable</Title>
      <Shortcut>silcv</Shortcut>
      <Description>static inline const  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineConstVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline const $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline const variable (with initialization)</Title>
      <Shortcut>silcvx</Shortcut>
      <Description>static inline const  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineConstVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline const $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline function definition</Title>
      <Shortcut>silfx</Shortcut>
      <Description>static inline function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline variable</Title>
      <Shortcut>silv</Shortcut>
      <Description>static inline  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static inline variable (with initialization)</Title>
      <Shortcut>silvx</Shortcut>
      <Description>static inline  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticInlineVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static inline $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static variable</Title>
      <Shortcut>sv</Shortcut>
      <Description>static  variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static $_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static variable (with initialization)</Title>
      <Shortcut>svx</Shortcut>
      <Description>static  variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticVariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[static $type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>struct declaration</Title>
      <Shortcut>st</Shortcut>
      <Description>struct declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StructDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Struct name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[struct $name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>struct definition</Title>
      <Shortcut>stx</Shortcut>
      <Description>struct definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StructDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Struct name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[struct $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>switch</Title>
      <Shortcut>sw</Shortcut>
      <Description>switch statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Switch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to switch on</ToolTip>
          <Default>SwitchOn</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[switch ($expression$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>template</Title>
      <Shortcut>t</Shortcut>
      <Description>template</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Template</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>typename</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[template <$typeName$ $type$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>template with 2 parameters</Title>
      <Shortcut>t2</Shortcut>
      <Description>template with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TemplateWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>type2</ID>
          <ToolTip>Type name</ToolTip>
          <Default>T2</Default>
        </Literal>
        <Literal>
          <ID>typeName</ID>
          <ToolTip>Type name</ToolTip>
          <Default>typename</Default>
        </Literal>
        <Literal>
          <ID>typeName2</ID>
          <ToolTip>Type name</ToolTip>
          <Default>typename</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[template <$typeName$ $type$, $typeName2$ $type2$>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>try-catch</Title>
      <Shortcut>tc</Shortcut>
      <Description>try-catch</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryCatch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>e</Default>
        </Literal>
        <Literal>
          <ID>exception</ID>
          <ToolTip>Exception name</ToolTip>
          <Default>std::exception</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[try {
	$selected$$end$
} catch (const $exception$& $_identifier$) {
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>typedef declaration</Title>
      <Shortcut>td</Shortcut>
      <Description> typedef declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TypeDefDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[typedef $type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>union</Title>
      <Shortcut>un</Shortcut>
      <Description>union</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Union</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Union name</ToolTip>
          <Default>UnionName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[union $name$ {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>using declaration</Title>
      <Shortcut>u</Shortcut>
      <Description>using declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UsingDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Name</ToolTip>
          <Default>Name</Default>
        </Literal>
        <Literal>
          <ID>namespaceName</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[using $namespaceName$::$name$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>using namespace</Title>
      <Shortcut>una</Shortcut>
      <Description>using namespace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UsingNamespace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Namespace name</ToolTip>
          <Default>NamespaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[using namespace $name$$selected$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>variable</Title>
      <Shortcut>v</Shortcut>
      <Description> variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Variable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$_type$ $_identifier$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>variable (with initialization)</Title>
      <Shortcut>vx</Shortcut>
      <Description> variable (with initialization)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VariableWithInitialization</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Variable type name</ToolTip>
          <Default>auto</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[$type$ $_identifier$ = $_value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>virtual function declaration</Title>
      <Shortcut>vf</Shortcut>
      <Description>virtual function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VirtualFunctionDeclaration</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[virtual $type$ $name$($_parameters$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>virtual function definition</Title>
      <Shortcut>vfx</Shortcut>
      <Description>virtual function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VirtualFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[virtual $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>virtual inline function definition</Title>
      <Shortcut>vilfx</Shortcut>
      <Description>virtual inline function definition</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VirtualInlineFunctionDefinition</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Function name</ToolTip>
          <Default>FunctionName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[virtual inline $type$ $name$($_parameters$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>while</Title>
      <Shortcut>we</Shortcut>
      <Description>while statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name While</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[while ($expression$) {
	$selected$$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>