<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable</Title>
      <Shortcut>va</Shortcut>
      <Description>array variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = New $_type$($_arrayLength$){}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array variable (with initializer)</Title>
      <Shortcut>vax</Shortcut>
      <Description>array variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_collectionIdentifier$ = New $_type$() {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Attribute class</Title>
      <Shortcut>c_Attribute</Shortcut>
      <Description>class derived from Attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AttributeClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>allowMultiple</ID>
          <Default>False</Default>
        </Literal>
        <Literal>
          <ID>base</ID>
          <ToolTip>Base class name</ToolTip>
          <Default>Attribute</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public NotInheritable</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Attribute name</ToolTip>
          <Default>My</Default>
        </Literal>
        <Literal>
          <ID>target</ID>
          <Default>.All</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[<AttributeUsage(AttributeTargets$target$, AllowMultiple:=$allowMultiple$)>
$modifier$ Class $name$Attribute
	Inherits $base$
	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Boolean variable</Title>
      <Shortcut>vb</Shortcut>
      <Description>Boolean variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BooleanVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>False</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ As Boolean = $value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Catch clause</Title>
      <Shortcut>catch</Shortcut>
      <Description>Catch clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Catch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>exceptionType</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ex</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Catch $identifier$ As $exceptionType$
	$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Collection(Of T) class</Title>
      <Shortcut>c_CollectionOfT</Shortcut>
      <Description>class derived from Collection(Of T)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name CollectionClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Inherits Collection(Of $type$)

	Public Sub New()
	End Sub

	Public Sub New(list As IList(Of $type$))
		MyBase.New(list)
	End Sub
	$end$

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>CType operator</Title>
      <Shortcut>t</Shortcut>
      <Description>CType operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name CTypeOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[CType($expression$, $type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>DateTime type</Title>
      <Shortcut>dt</Shortcut>
      <Description>DateTime type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DateTimeType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[DateTime$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Assert</Title>
      <Shortcut>da</Shortcut>
      <Description>Debug.Assert method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugAssert</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>False</Default>
        </Literal>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Debug.Assert($expression$, $message$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.WriteLine</Title>
      <Shortcut>dw</Shortcut>
      <Description>Debug.WriteLine method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugWriteLine</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Method parameters</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Debug.WriteLine($parameters$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dictionary(Of TKey, TValue) class</Title>
      <Shortcut>c_DictionaryOfTKeyTValue</Shortcut>
      <Description>class derived from Dictionary(Of TKey, TValue)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DictionaryOfTKeyTValueClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Runtime.Serialization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_keyType</ID>
          <ToolTip>Key type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>_valueType</ID>
          <ToolTip>Value type</ToolTip>
          <Default>Object</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Dictionary type name</ToolTip>
          <Default>Dictionary</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Inherits Dictionary(Of $_keyType$, $_valueType$)

	Public Sub New()
		MyBase.New()
	End Sub

	Public Sub New(capacity As Integer)
		MyBase.New(capacity)
	End Sub

	Public Sub New(comparer As IEqualityComparer(Of $_keyType$))
		MyBase.New(comparer)
	End Sub

	Public Sub New(dictionary As IDictionary(Of $_keyType$, $_valueType$))
		MyBase.New(dictionary)
	End Sub

	Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of $_keyType$))
		MyBase.New(capacity, comparer)
	End Sub

	Public Sub New(info As SerializationInfo, context As StreamingContext)
		MyBase.New(info, context)
	End Sub

	Public Sub New(dictionary As IDictionary(Of $_keyType$, $_valueType$), comparer As IEqualityComparer(Of $_keyType$))
		MyBase.New(dictionary, comparer)
	End Sub

	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Disposable class</Title>
      <Shortcut>c_Disposable</Shortcut>
      <Description>class that implements IDisposable interface</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DisposableClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Implements IDisposable

	Private _disposed As Boolean

	Public Sub Dispose() Implements IDisposable.Dispose

		Dispose(True)
		GC.SuppressFinalize(Me)

	End Sub

	Protected Overridable Sub Dispose(disposing As Boolean)

		If Not _disposed Then

			If disposing Then
				Throw New NotImplementedException()
			End If

			_disposed = True

		End If

	End Sub

End Class$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Dispose</Title>
      <Shortcut>dispose</Shortcut>
      <Description>Dispose pattern</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Dispose</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[Private _disposed As Boolean

Public Sub Dispose()

	Dispose(True)
	GC.SuppressFinalize(Me)

End Sub

Protected Overridable Sub Dispose(disposing As Boolean)

	If Not _disposed Then
		If disposing Then
			Throw New NotImplementedException()
		End If
		_disposed = True
	End If

End Sub$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Do statement</Title>
      <Shortcut>do</Shortcut>
      <Description>Do statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Do</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Do
	$end$
Loop]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Else clause</Title>
      <Shortcut>e</Shortcut>
      <Description>Else clause</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Else</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Else
	$selected$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ElseIf</Title>
      <Shortcut>eif</Shortcut>
      <Description>ElseIf statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ElseIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>True</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[ElseIf $expression$ Then
	$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Equals and GetHashCode</Title>
      <Shortcut>equals</Shortcut>
      <Description>overriding Equals and GetHashCode methods</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name EqualsAndGetHashCode</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Overrides Function Equals(obj As object) As Boolean

	Dim other = Nothing
	If TryCast(other, $thisName$) Is Nothing Then
		Return False
	End If

	$end$
	Throw New NotImplementedException()

End Function

Public Overrides Function GetHashCode() As Integer
	Throw New NotImplementedException()
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Exception class</Title>
      <Shortcut>c_Exception</Shortcut>
      <Description>class derived from Exception</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ExceptionClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Runtime.Serialization</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>base</ID>
          <ToolTip>Base exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Exception name</ToolTip>
          <Default>My</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[<Serializable>
$modifier$ Class $name$Exception
	Inherits $base$

	Public Sub New()
	End Sub

	Public Sub New(message As String)
		MyBase.New(message)
	End Sub

	Public Sub New(message As String, inner As Exception)
		MyBase.New(message, inner)
	End Sub

	Protected Sub New(info As SerializationInfo, context As StreamingContext)
		MyBase.New(info, context)
	End Sub$end$

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>For statement</Title>
      <Shortcut>fr</Shortcut>
      <Description>For statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name For</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[For $index$ = 0 To $length$ - 1
	$end$
Next]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>For Each statement</Title>
      <Shortcut>fe</Shortcut>
      <Description>For Each statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForEach</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collectionIdentifier</ID>
          <ToolTip>Sequence identifier name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>elementIdentifier</ID>
          <ToolTip>Identifier that represents the element in the collection</ToolTip>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[For Each $elementIdentifier$ In $_collectionIdentifier$
	$end$
Next]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>For statement (reversed)</Title>
      <Shortcut>frr</Shortcut>
      <Description>For statement (reversed)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ForReversed</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>index</ID>
          <ToolTip>Index</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>length</ID>
          <ToolTip>Max length</ToolTip>
          <Default>length</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[For $index$ = $length$ - 1 To 0 Step -1
	$end$
Next]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>GetType</Title>
      <Shortcut>gt</Shortcut>
      <Description>GetType operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name GetTypeOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[GetType($_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IComparer class</Title>
      <Shortcut>c_IComparer</Shortcut>
      <Description>class that implements IComparer</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IComparerClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Comparer name</ToolTip>
          <Default>Comparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Implements IComparer

	Public Function Compare(x As Object, y As Object) As Integer Implements IComparer.Compare

		If Object.ReferenceEquals(x, y) Then
			Return 0
		End If

		If x Is Nothing Then
			Return IIf(y Is Nothing, 0, -1)
		End If

		If y Is Nothing Then
			Return 1
		End If

		Dim a = CType(x, $type$)
		Dim b = CType(y, $type$)

		$end$
		Throw New NotImplementedException()

	End Function

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IComparer(Of T) class</Title>
      <Shortcut>c_IComparerOfT</Shortcut>
      <Description>class that implements IComparer(Of T)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IComparerOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Implements IComparer(Of $type$)

	Public Function Compare(x As $type$, y As $type$) As Integer Implements IComparer(Of $type$).Compare

		If Object.ReferenceEquals(x, y) Then
			Return 0
		End If

		If x Is Nothing Then
			Return -1
		End If

		If y Is Nothing Then
			Return 1
		End If

		$end$
		Throw New NotImplementedException()

	End Function

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IEqualityComparer class</Title>
      <Shortcut>c_IEqualityComparer</Shortcut>
      <Description>class that implements IEqualityComparer</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IEqualityComparerClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Equality comparer name</ToolTip>
          <Default>EqualityComparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Implements IEqualityComparer

	Public Shadows Function Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals

		If Object.ReferenceEquals(x, y) Then
			Return True
		End If

		If x Is Nothing OrElse y Is Nothing Then
			Return False
		End If

		Dim a = CType(x, $type$)
		Dim b = CType(y, $type$)

		$end$
		Throw New NotImplementedException()

	End Function

	Public Shadows Function GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode

		If obj Is Nothing Then
			Return 0
		End If

		Throw New NotImplementedException()

	End Function

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IEqualityComparer(Of T) class</Title>
      <Shortcut>c_IEqualityComparerOfT</Shortcut>
      <Description>class that implements IEqualityComparer(Of T)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IEqualityComparerOfTClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Equality comparer name</ToolTip>
          <Default>EqualityComparer</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Inherits EqualityComparer(Of $type$)

	Public Overrides Function Equals(x As $type$, y As $type$) As Boolean

		If Object.ReferenceEquals(x, y) Then
			Return True
		End If

		If x Is Nothing OrElse y Is Nothing Then
			Return False
		End If

		$end$
		Throw New NotImplementedException()

	End Function

	Public Overrides Function GetHashCode(obj As $type$) As Integer

		If obj Is Nothing Then
			Return 0
		End If

		Throw New NotImplementedException()

	End Function

End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>If Is Nothing</Title>
      <Shortcut>ifn</Shortcut>
      <Description>If Is Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfIsNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[If $expression$ Is Nothing Then
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>If IsNot Nothing</Title>
      <Shortcut>ifxn</Shortcut>
      <Description>If IsNot Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfIsNotNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[If $expression$ IsNot Nothing Then
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>If Not</Title>
      <Shortcut>ifx</Shortcut>
      <Description>If statement with condition whether the expression is equal to false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNot</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[If Not $expression$ Then
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not TryParse</Title>
      <Shortcut>ifxtp</Shortcut>
      <Description>if statement with condition whether TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $_type$
If Not $_type$.TryParse($value$, $result$)
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>If TryCast Is Nothing</Title>
      <Shortcut>ifxtc</Shortcut>
      <Description>If TryCast Is Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfTryCastIsNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = Nothing
	If TryCast($identifier$, $type$) Is Nothing Then
		$end$
	End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>If TryCast IsNot Nothing</Title>
      <Shortcut>iftc</Shortcut>
      <Description>If TryCast IsNot Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfTryCastIsNotNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = Nothing
	If TryCast($identifier$, $type$) IsNot Nothing Then
		$end$
	End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if TryParse</Title>
      <Shortcut>iftp</Shortcut>
      <Description>if statement with condition whether TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $_type$
If $_type$.TryParse($value$, $result$)
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Int32 variable</Title>
      <Shortcut>vi</Shortcut>
      <Description>Int32 variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Int32Variable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>A value to assign</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ As Integer = $value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface event</Title>
      <Shortcut>_ev</Shortcut>
      <Description>interface event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Event $name$ As EventHandler(Of $eventArgs$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface indexer</Title>
      <Shortcut>_in</Shortcut>
      <Description>interface indexer</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Indexer parameter</ToolTip>
          <Default>int index</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Property Item($parameter$) As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface method</Title>
      <Shortcut>_m</Shortcut>
      <Description>interface method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Function $name$($_parameters$) As $_type$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface property</Title>
      <Shortcut>_p</Shortcut>
      <Description>interface property</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>interface read-only property</Title>
      <Shortcut>_rp</Shortcut>
      <Description>interface read-only property</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InterfaceReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend auto property</Title>
      <Shortcut>ip</Shortcut>
      <Description>Friend auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend class</Title>
      <Shortcut>ic</Shortcut>
      <Description>Friend class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Class $name$
	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend constant</Title>
      <Shortcut>ik</Shortcut>
      <Description>Friend constant declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalConstant</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>Nothing</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Const $name$ As $_type$ = $_value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend constructor</Title>
      <Shortcut>ico</Shortcut>
      <Description>Friend constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Sub New($_parameters$)
	$end$
End Sub]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend delegate</Title>
      <Shortcut>ide</Shortcut>
      <Description>Friend delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Delegate Function $name$($_parameters$) As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend enum</Title>
      <Shortcut>ien</Shortcut>
      <Description>Friend enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>enum</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Enum $enum$
	$end$
End Enum]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend event</Title>
      <Shortcut>iev_EventHandler</Shortcut>
      <Description>Friend event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
        <Literal>
          <ID>parameterName</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>e</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Event $name$ As EventHandler(Of $eventArgs$)

Protected Overridable Sub On$name$($parameterName$ As $eventArgs$)
	RaiseEvent $name$(Me, $parameterName$)
End Sub$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend indexer</Title>
      <Shortcut>iin</Shortcut>
      <Description>Friend indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Friend Property Item($parameters$) As $_type$
	Get
		$end$
	End Get
	Set(ByVal Value As $_type$)
	End Set
End Property]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend interface</Title>
      <Shortcut>iie</Shortcut>
      <Description>Friend interface declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalInterface</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Interface name</ToolTip>
          <Default>InterfaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Interface $name$
	$end$
End Interface]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend method</Title>
      <Shortcut>im</Shortcut>
      <Description>Friend method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend module</Title>
      <Shortcut>imo</Shortcut>
      <Description>Friend module declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalModule</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Module name</ToolTip>
          <Default>ModuleName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Module $name$
	$end$
End Module]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend read-only auto property</Title>
      <Shortcut>irp</Shortcut>
      <Description>Friend read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend read-only field</Title>
      <Shortcut>irf</Shortcut>
      <Description>Friend read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend read-only indexer</Title>
      <Shortcut>irin</Shortcut>
      <Description>Friend read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Friend Property Item($parameters$) As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend read-only Property</Title>
      <Shortcut>irpp</Shortcut>
      <Description>Friend read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Shared method</Title>
      <Shortcut>ism</Shortcut>
      <Description>Friend Shared method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Shared Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Shared read-only auto property</Title>
      <Shortcut>isrp</Shortcut>
      <Description>Friend Shared read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Shared ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Shared read-only field</Title>
      <Shortcut>isrf</Shortcut>
      <Description>Friend Shared read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Shared ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Shared read-only Property</Title>
      <Shortcut>isrpp</Shortcut>
      <Description>Friend Shared read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Shared ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend structure</Title>
      <Shortcut>ist</Shortcut>
      <Description>Friend structure declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Structure $name$
	$end$
End Structure]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Overridable auto property</Title>
      <Shortcut>ivp</Shortcut>
      <Description>Friend Overridable auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Overridable Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Overridable method</Title>
      <Shortcut>ivm</Shortcut>
      <Description>Friend Overridable method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Overridable Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Overridable read-only auto property</Title>
      <Shortcut>ivrp</Shortcut>
      <Description>Friend Overridable read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Overridable ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Friend Overridable read-only Property</Title>
      <Shortcut>ivrpp</Shortcut>
      <Description>Friend Overridable read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name InternalVirtualReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Friend Overridable ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Is Nothing</Title>
      <Shortcut>n</Shortcut>
      <Description>A condition whether the expression is Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IsNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$left$ Is Nothing$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IsNot Nothing</Title>
      <Shortcut>xn</Shortcut>
      <Description>A condition whether the expression is not Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IsNotNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$left$ IsNot Nothing$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>KeyValuePair type</Title>
      <Shortcut>kvp</Shortcut>
      <Description>KeyValuePair type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name KeyValuePair</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[KeyValuePair$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>KeyValuePair.Create method</Title>
      <Shortcut>kvpc</Shortcut>
      <Description>KeyValuePair.Create method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name KeyValuePairCreate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
      </Imports>
      <Code Language="VB"><![CDATA[KeyValuePair.Create$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Lambda expression</Title>
      <Shortcut>l</Shortcut>
      <Description>Lambda expression</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpression</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Function(f) $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Lambda expression without parameters</Title>
      <Shortcut>l0</Shortcut>
      <Description>Lambda expression without parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpressionWithoutParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Function() $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Lambda expression with 2 parameters</Title>
      <Shortcut>l2</Shortcut>
      <Description>Lambda expression with 2 parameters</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpressionWithTwoParameters</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Function(f, g) $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>NameOf operator</Title>
      <Shortcut>no</Shortcut>
      <Description>Nameof operator</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NameOfOperator</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Variable, type or member</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[NameOf($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- new variable</Title>
      <Shortcut>vn</Shortcut>
      <Description>new variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>List of arguments</ToolTip>
          <Default>arguments</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = New $type$($_arguments$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- new variable (with initializer)</Title>
      <Shortcut>vnx</Shortcut>
      <Description>new variable declaration (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewVariableWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>List of arguments</ToolTip>
          <Default>arguments</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = New $type$($_arguments$) With {$_value$}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String.IsNullOrEmpty = False</Title>
      <Shortcut>xsne</Shortcut>
      <Description>String.IsNullOrEmpty = False</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[String.IsNullOrEmpty($expression$) = False$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String.IsNullOrWhiteSpace = False</Title>
      <Shortcut>xsnw</Shortcut>
      <Description>String.IsNullOrWhiteSpace = False</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[String.IsNullOrWhiteSpace($expression$) = False$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ObservableCollection(Of T) class</Title>
      <Shortcut>c_ObservableCollectionOfT</Shortcut>
      <Description>class derived from ObservableCollection(Of T)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ObservableCollectionClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Inherits ObservableCollection(Of $type$)

	Public Sub New()
	End Sub

	Public Sub New(collection As IEnumerable(Of $type$))
		MyBase.New(collection)
	End Sub

	Public Sub New(list As IList(Of $type$))
		MyBase.New(list)
	End Sub

	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&amp; operator overloading</Title>
      <Shortcut>oo_Ampersand</Shortcut>
      <Description>&amp; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorAmpersand</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator &($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>And operator overloading</Title>
      <Shortcut>oo_And</Shortcut>
      <Description>And operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorAnd</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator And($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>* operator overloading</Title>
      <Shortcut>oo_Asterisk</Shortcut>
      <Description>* operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorAsterisk</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator *($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>\ operator overloading</Title>
      <Shortcut>oo_Backslash</Shortcut>
      <Description>\ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorBackslash</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator \($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>^ operator overloading</Title>
      <Shortcut>oo_Caret</Shortcut>
      <Description>^ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorCaret</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator ^($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>CType operator overloading</Title>
      <Shortcut>oo_CType</Shortcut>
      <Description>CType operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorCType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Object to convert</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type to convert to</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Widening Operator CType(ByVal $operand$ As $thisName$) As $type$
	$end$
End Operator

Public Shared Narrowing Operator CType(ByVal $operand$ As $type$) As $thisName$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>= operator overloading</Title>
      <Shortcut>oo_Equals</Shortcut>
      <Description>= operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorEquality</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator =($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator

Public Shared Operator <>($left$ As $thisName$, $right$ As $thisName$)
	Return Not($left$ = $right$)
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt; operator overloading</Title>
      <Shortcut>oo_GreaterThan</Shortcut>
      <Description>&gt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator >($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator

Public Shared Operator <($left$ As $thisName$, $right$ As $thisName$)
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt;&gt; operator overloading</Title>
      <Shortcut>oo_GreaterThanGreaterThan</Shortcut>
      <Description>&gt;&gt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThanGreaterThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>count</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator >>($left$ As $thisName$, $right$ As Integer)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&gt;= operator overloading</Title>
      <Shortcut>oo_GreaterThanEquals</Shortcut>
      <Description>&gt;= operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorGreaterThanOrEqual</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator >=($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator

Public Shared Operator <=($left$ As $thisName$, $right$ As $thisName$)
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IsFalse operator overloading</Title>
      <Shortcut>oo_IsFalse</Shortcut>
      <Description>IsFalse operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorIsFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator IsTrue($operand$ As $thisName$) As Boolean
End Operator

Public Shared Operator IsFalse($operand$ As $thisName$) As Boolean
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>IsTrue operator overloading</Title>
      <Shortcut>oo_IsTrue</Shortcut>
      <Description>IsTrue operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorIsTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator IsTrue($operand$ As $thisName$) As Boolean
	$end$
End Operator

Public Shared Operator IsFalse($operand$ As $thisName$) As Boolean
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt; operator overloading</Title>
      <Shortcut>oo_LessThan</Shortcut>
      <Description>&lt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator <($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator

Public Shared Operator >($left$ As $thisName$, $right$ As $thisName$)
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt;&lt; operator overloading</Title>
      <Shortcut>oo_LessThanLessThan</Shortcut>
      <Description>&lt;&lt; operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThanLessThan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>count</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator <<($left$ As $thisName$, $right$ As Integer)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>&lt;= operator overloading</Title>
      <Shortcut>oo_LessThanEquals</Shortcut>
      <Description>&lt;= operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLessThanOrEqual</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator <=($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator

Public Shared Operator >=($left$ As $thisName$, $right$ As $thisName$)
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Like operator overloading</Title>
      <Shortcut>oo_Like</Shortcut>
      <Description>Like operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorLike</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator Like($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>- operator overloading</Title>
      <Shortcut>oo_Minus</Shortcut>
      <Description>- operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorMinus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator -($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Mod operator overloading</Title>
      <Shortcut>oo_Mod</Shortcut>
      <Description>Mod operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorMod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator Mod($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Not operator overloading</Title>
      <Shortcut>oo_Not</Shortcut>
      <Description>Not operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorNot</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>operand</ID>
          <ToolTip>Operand</ToolTip>
          <Default>value</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator Not($operand$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Or operator overloading</Title>
      <Shortcut>oo_Or</Shortcut>
      <Description>Or operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorOr</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator Or($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>+ operator overloading</Title>
      <Shortcut>oo_Plus</Shortcut>
      <Description>+ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorPlus</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator +($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>/ operator overloading</Title>
      <Shortcut>oo_Slash</Shortcut>
      <Description>/ operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorSlash</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator /($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Xor operator overloading</Title>
      <Shortcut>oo_Xor</Shortcut>
      <Description>Xor operator overloading</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverloadedOperatorXor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>left</ID>
          <ToolTip>Left operand</ToolTip>
          <Default>left</Default>
        </Literal>
        <Literal>
          <ID>right</ID>
          <ToolTip>Right operand</ToolTip>
          <Default>right</Default>
        </Literal>
        <Literal>
          <ID>thisName</ID>
          <ToolTip>Containing type name</ToolTip>
          <Default>ThisName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Operator Xor($left$ As $thisName$, $right$ As $thisName$)
	$end$
End Operator]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>parameter array </Title>
      <Shortcut>pa</Shortcut>
      <Description>parameter array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ParameterArray</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>values</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[ParamArray $name$ As $_type$()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#If directive</Title>
      <Shortcut>ppif</Shortcut>
      <Description>#If preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIf</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>symbol</ID>
          <ToolTip>Symbol to evaluate</ToolTip>
          <Default>DEBUG</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[#If $symbol$ Then
	$selected$$end$
#End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#If-#Else directive</Title>
      <Shortcut>ppife</Shortcut>
      <Description>#If-#Else preprocessor directives</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveIfElse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>symbol</ID>
          <ToolTip>Symbol to evaluate</ToolTip>
          <Default>DEBUG</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[#If $symbol$ Then
	$selected$$end$
#Else

#End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>#Region directive</Title>
      <Shortcut>ppr</Shortcut>
      <Description>#Region preprocessor directive</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PreprocessorDirectiveRegion</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Region name</ToolTip>
          <Default>RegionName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[#Region "$name$"
	$selected$$end$
#End Region]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private auto property</Title>
      <Shortcut>pp</Shortcut>
      <Description>Private auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private class</Title>
      <Shortcut>pc</Shortcut>
      <Description>Private class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Class $name$
	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private constant</Title>
      <Shortcut>pk</Shortcut>
      <Description>Private constant declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateConstant</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>Nothing</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Const $name$ As $_type$ = $_value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private constructor</Title>
      <Shortcut>pco</Shortcut>
      <Description>Private constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Sub New($_parameters$)
	$end$
End Sub]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private delegate</Title>
      <Shortcut>pde</Shortcut>
      <Description>Private delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Delegate Function $name$($_parameters$) As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private enum</Title>
      <Shortcut>pen</Shortcut>
      <Description>Private enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>enum</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Enum $enum$
	$end$
End Enum]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private event</Title>
      <Shortcut>pev_EventHandler</Shortcut>
      <Description>Private event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
        <Literal>
          <ID>parameterName</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>e</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Event $name$ As EventHandler(Of $eventArgs$)

Protected Overridable Sub On$name$($parameterName$ As $eventArgs$)
	RaiseEvent $name$(Me, $parameterName$)
End Sub$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private field</Title>
      <Shortcut>pf</Shortcut>
      <Description>Private field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private indexer</Title>
      <Shortcut>pin</Shortcut>
      <Description>Private indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Private Property Item($parameters$) As $_type$
	Get
		$end$
	End Get
	Set(ByVal Value As $_type$)
	End Set
End Property]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private method</Title>
      <Shortcut>pm</Shortcut>
      <Description>Private method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private read-only auto property</Title>
      <Shortcut>prp</Shortcut>
      <Description>Private read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private read-only field</Title>
      <Shortcut>prf</Shortcut>
      <Description>Private read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private read-only indexer</Title>
      <Shortcut>prin</Shortcut>
      <Description>Private read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Private Property Item($parameters$) As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private read-only Property</Title>
      <Shortcut>prpp</Shortcut>
      <Description>Private read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private Shared field</Title>
      <Shortcut>psf</Shortcut>
      <Description>Private Shared field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Shared $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private Shared method</Title>
      <Shortcut>psm</Shortcut>
      <Description>Private Shared method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Shared Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private Shared read-only auto property</Title>
      <Shortcut>psrp</Shortcut>
      <Description>Private Shared read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Shared ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private Shared read-only field</Title>
      <Shortcut>psrf</Shortcut>
      <Description>Private Shared read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Shared ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private Shared read-only Property</Title>
      <Shortcut>psrpp</Shortcut>
      <Description>Private Shared read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Shared ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Private structure</Title>
      <Shortcut>pst</Shortcut>
      <Description>Private structure declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PrivateStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Private Structure $name$
	$end$
End Structure]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public auto property</Title>
      <Shortcut>p</Shortcut>
      <Description>Public auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public class</Title>
      <Shortcut>c</Shortcut>
      <Description>Public class declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Class $name$
	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public constant</Title>
      <Shortcut>k</Shortcut>
      <Description>Public constant declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicConstant</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Constant type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Constant value</ToolTip>
          <Default>Nothing</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Constant name</ToolTip>
          <Default>ConstantName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Const $name$ As $_type$ = $_value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public constructor</Title>
      <Shortcut>co</Shortcut>
      <Description>Public constructor declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Sub New($_parameters$)
	$end$
End Sub]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public delegate</Title>
      <Shortcut>de</Shortcut>
      <Description>Public delegate declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicDelegate</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Delegate name</ToolTip>
          <Default>DelegateName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Delegate Function $name$($_parameters$) As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public enum</Title>
      <Shortcut>en</Shortcut>
      <Description>Public enum declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicEnum</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>enum</ID>
          <ToolTip>Enum name</ToolTip>
          <Default>EnumName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Enum $enum$
	$end$
End Enum]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public event</Title>
      <Shortcut>ev_EventHandler</Shortcut>
      <Description>Public event declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicEvent</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>eventArgs</ID>
          <ToolTip>EventArgs type name</ToolTip>
          <Default>EventArgs</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Event name</ToolTip>
          <Default>EventName</Default>
        </Literal>
        <Literal>
          <ID>parameterName</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>e</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Event $name$ As EventHandler(Of $eventArgs$)

Protected Overridable Sub On$name$($parameterName$ As $eventArgs$)
	RaiseEvent $name$(Me, $parameterName$)
End Sub$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public field</Title>
      <Shortcut>f</Shortcut>
      <Description>Public field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public indexer</Title>
      <Shortcut>in</Shortcut>
      <Description>Public indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Public Property Item($parameters$) As $_type$
	Get
		$end$
	End Get
	Set(ByVal Value As $_type$)
	End Set
End Property]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public interface</Title>
      <Shortcut>ie</Shortcut>
      <Description>Public interface declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicInterface</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Interface name</ToolTip>
          <Default>InterfaceName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Interface $name$
	$end$
End Interface]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public method</Title>
      <Shortcut>m</Shortcut>
      <Description>Public method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public module</Title>
      <Shortcut>mo</Shortcut>
      <Description>Public module declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicModule</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Module name</ToolTip>
          <Default>ModuleName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Module $name$
	$end$
End Module]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public read-only auto property</Title>
      <Shortcut>rp</Shortcut>
      <Description>Public read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public read-only field</Title>
      <Shortcut>rf</Shortcut>
      <Description>Public read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public read-only indexer</Title>
      <Shortcut>rin</Shortcut>
      <Description>Public read-only indexer declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyIndexer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Indexer type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>parameters</ID>
          <ToolTip>Parameters</ToolTip>
          <Default>ByVal index As Integer</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Default Public Property Item($parameters$) As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public read-only Property</Title>
      <Shortcut>rpp</Shortcut>
      <Description>Public read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Shared field</Title>
      <Shortcut>sf</Shortcut>
      <Description>Public Shared field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Shared method</Title>
      <Shortcut>sm</Shortcut>
      <Description>Public Shared method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Shared read-only auto property</Title>
      <Shortcut>srp</Shortcut>
      <Description>Public Shared read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Shared read-only field</Title>
      <Shortcut>srf</Shortcut>
      <Description>Public Shared read-only field declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyField</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Field type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Field name</ToolTip>
          <Default>FieldName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared ReadOnly $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Shared read-only Property</Title>
      <Shortcut>srpp</Shortcut>
      <Description>Public Shared read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStaticReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Shared ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public structure</Title>
      <Shortcut>st</Shortcut>
      <Description>Public structure declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicStruct</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Structure name</ToolTip>
          <Default>StructName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Structure $name$
	$end$
End Structure]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Overridable auto property</Title>
      <Shortcut>vp</Shortcut>
      <Description>Public Overridable auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Overridable Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Overridable method</Title>
      <Shortcut>vm</Shortcut>
      <Description>Public Overridable method declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualMethod</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>parameter As T</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Overridable Function $name$($_parameters$) As $_type$
	$end$
End Function]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Overridable read-only auto property</Title>
      <Shortcut>vrp</Shortcut>
      <Description>Public Overridable read-only auto-implemented property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualReadOnlyAutoProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Overridable ReadOnly Property $name$ As $_type$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Public Overridable read-only Property</Title>
      <Shortcut>vrpp</Shortcut>
      <Description>Public Overridable read-only property declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name PublicVirtualReadOnlyProperty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Property type</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Property name</ToolTip>
          <Default>PropertyName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Return value</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Public Overridable ReadOnly Property $name$ As $_type$
	Get
		Return $value$
	End Get
End Property$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>ReadOnlyCollection(Of T) class</Title>
      <Shortcut>c_ReadOnlyCollectionOfT</Shortcut>
      <Description>class derived from ReadOnlyCollection(Of T)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReadOnlyCollectionClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Collections.Generic</Namespace>
        </Import>
        <Import>
          <Namespace>System.Collections.ObjectModel</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Collection type name</ToolTip>
          <Default>Collection</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>Type</ToolTip>
          <Default>Object</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$
	Inherits ReadOnlyCollection(Of $type$)

	Public Sub New(list As IList(Of $type$))
		MyBase.New(list)
	End Sub

	$end$
End Class]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return False</Title>
      <Shortcut>ref</Shortcut>
      <Description>Return False</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return False$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return Nothing</Title>
      <Shortcut>ren</Shortcut>
      <Description>Return Nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return Nothing$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return True</Title>
      <Shortcut>ret</Shortcut>
      <Description>Return True</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return True$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Select Case statement</Title>
      <Shortcut>sc</Shortcut>
      <Description>Select Case statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name SelectCase</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression</ToolTip>
          <Default>expression</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Select Case $expression$
	$end$
End Select]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>singleton class</Title>
      <Shortcut>c_Singleton</Shortcut>
      <Description>class that implements singleton pattern</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name SingletonClass</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>modifier</ID>
          <ToolTip>Modifier(s)</ToolTip>
          <Default>Public NotInheritable</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$modifier$ Class $name$

	Private Sub New()
	End Sub

	Public Shared ReadOnly Property Instance As $name$ = $value$

End Class$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>static constructor</Title>
      <Shortcut>sco</Shortcut>
      <Description>static constructor</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StaticConstructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Shared Sub New()
	$end$
End Sub]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String.IsNullOrEmpty</Title>
      <Shortcut>sne</Shortcut>
      <Description>String.IsNullOrEmpty method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[String.IsNullOrEmpty($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String.IsNullOrWhiteSpace</Title>
      <Shortcut>snw</Shortcut>
      <Description>String.IsNullOrWhiteSpace method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[String.IsNullOrWhiteSpace($expression$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String variable</Title>
      <Shortcut>vs</Shortcut>
      <Description>String variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>Nothing</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ As String = $value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New</Title>
      <Shortcut>thn</Shortcut>
      <Description>Throw New</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Throw New$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New ArgumentException</Title>
      <Shortcut>thn_ae</Shortcut>
      <Description>Throw New ArgumentException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New ArgumentException($message$, NameOf($parameter$))$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New ArgumentNullException</Title>
      <Shortcut>thn_ane</Shortcut>
      <Description>Throw New ArgumentNullException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentNullException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New ArgumentNullException(NameOf($parameter$))$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New ArgumentOutOfRangeException</Title>
      <Shortcut>thn_aoore</Shortcut>
      <Description>Throw New ArgumentOutOfRangeException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewArgumentOutOfRangeException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
        <Literal>
          <ID>parameter</ID>
          <ToolTip>Parameter name</ToolTip>
          <Default>parameter</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New ArgumentOutOfRangeException(NameOf($parameter$), $parameter$, $message$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New InvalidCastException</Title>
      <Shortcut>thn_ice</Shortcut>
      <Description>Throw New InvalidCastException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewInvalidCastException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New InvalidCastException($message$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New InvalidOperationException</Title>
      <Shortcut>thn_ioe</Shortcut>
      <Description>Throw New InvalidOperationException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewInvalidOperationException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New InvalidOperationException($_exceptionMessage$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New NotImplementedException</Title>
      <Shortcut>thn_nie</Shortcut>
      <Description>Throw New NotImplementedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewNotImplementedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New NotImplementedException($_exceptionMessage$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New NotSupportedException</Title>
      <Shortcut>thn_nse</Shortcut>
      <Description>Throw New NotSupportedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewNotSupportedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_exceptionMessage</ID>
          <ToolTip>Exception message</ToolTip>
          <Default>message</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New NotSupportedException($_exceptionMessage$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw New ObjectDisposedException</Title>
      <Shortcut>thn_ode</Shortcut>
      <Description>Throw New ObjectDisposedException</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowNewObjectDisposedException</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>_arguments</ID>
          <ToolTip>Arguments</ToolTip>
          <Default>args</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Throw New ObjectDisposedException($_arguments$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TODO comment</Title>
      <Shortcut>td</Shortcut>
      <Description>TODO comment</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TodoComment</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA['TODO: $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Try-Catch</Title>
      <Shortcut>tc</Shortcut>
      <Description>Try-Catch statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryCatch</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>exceptionType</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ex</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Try
	$selected$$end$
Catch $identifier$ as $exceptionType$
	Throw
End Try]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Try-Catch-Finally</Title>
      <Shortcut>tcf</Shortcut>
      <Description>Try-Catch-Finally statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryCatchFinally</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>exceptionType</ID>
          <ToolTip>Exception type</ToolTip>
          <Default>Exception</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>ex</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Try
	$selected$$end$
Catch $identifier$ as $exceptionType$
	Throw
Finally
End Try]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Try-Finally</Title>
      <Shortcut>tf</Shortcut>
      <Description>Try-Finally statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TryFinally</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Try
	$selected$$end$
Finally
End Try]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Using statement</Title>
      <Shortcut>u</Shortcut>
      <Description>Using statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UsingStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>disposable</ID>
          <ToolTip>A resource to use</ToolTip>
          <Default>disposable</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Using $disposable$
	$end$
End Using]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>local variable declaration</Title>
      <Shortcut>v</Shortcut>
      <Description>local variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name Variable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>_</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $_identifier$ = $_value$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>local variable with DirectCast</Title>
      <Shortcut>vt</Shortcut>
      <Description>local variable declaration with DirectCast</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VariableWithDirectCast</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Type to cast to</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to cast</ToolTip>
          <Default>_</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = DirectCast($expression$, $_type$)$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>While statement</Title>
      <Shortcut>we</Shortcut>
      <Description>While statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name While</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>True</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[While $expression$
	$end$
End While]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>While Is Nothing</Title>
      <Shortcut>wen</Shortcut>
      <Description>While statement with condition whether an expression is nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name WhileIsNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[While $expression$ Is Nothing
	$end$
End While]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>While IsNot Nothing</Title>
      <Shortcut>wexn</Shortcut>
      <Description>While statement with condition whether an expression is not nothing</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name WhileIsNotNothing</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[While $expression$ IsNot Nothing
	$end$
End While]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>