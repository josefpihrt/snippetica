{
  "- new variable": {
    "prefix": "vn",
    "body": [
      "Dim ${1:x} = New ${2:Object}(${3:arguments})${0}"
    ],
    "description": "new variable declaration"
  },
  "- new variable (with initializer)": {
    "prefix": "vnx",
    "body": [
      "Dim ${1:x} = New ${2:Object}(${3:arguments}) With {${4:x}}${0}"
    ],
    "description": "new variable declaration (with initializer)"
  },
  "- operator overloading": {
    "prefix": "oo_Minus",
    "body": [
      "Public Shared Operator -(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "- operator overloading"
  },
  "#If directive": {
    "prefix": "ppif",
    "body": [
      "#If ${1:DEBUG} Then",
      "\t${TM_SELECTED_TEXT}${0}",
      "#End If"
    ],
    "description": "#If preprocessor directive"
  },
  "#If-#Else directive": {
    "prefix": "ppife",
    "body": [
      "#If ${1:DEBUG} Then",
      "\t${TM_SELECTED_TEXT}${0}",
      "#Else",
      "",
      "#End If"
    ],
    "description": "#If-#Else preprocessor directives"
  },
  "#Region directive": {
    "prefix": "ppr",
    "body": [
      "#Region \"${1:RegionName}\"",
      "\t${TM_SELECTED_TEXT}${0}",
      "#End Region"
    ],
    "description": "#Region preprocessor directive"
  },
  "& operator overloading": {
    "prefix": "oo_Ampersand",
    "body": [
      "Public Shared Operator &(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "& operator overloading"
  },
  "* operator overloading": {
    "prefix": "oo_Asterisk",
    "body": [
      "Public Shared Operator *(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "* operator overloading"
  },
  "/ operator overloading": {
    "prefix": "oo_Slash",
    "body": [
      "Public Shared Operator /(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "/ operator overloading"
  },
  "\\ operator overloading": {
    "prefix": "oo_Backslash",
    "body": [
      "Public Shared Operator \\(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "\\ operator overloading"
  },
  "^ operator overloading": {
    "prefix": "oo_Caret",
    "body": [
      "Public Shared Operator ^(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "^ operator overloading"
  },
  "+ operator overloading": {
    "prefix": "oo_Plus",
    "body": [
      "Public Shared Operator +(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "+ operator overloading"
  },
  "< operator overloading": {
    "prefix": "oo_LessThan",
    "body": [
      "Public Shared Operator <(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator >(${1} As ${2}, ${3} As ${2})",
      "End Operator"
    ],
    "description": "< operator overloading"
  },
  "<< operator overloading": {
    "prefix": "oo_LessThanLessThan",
    "body": [
      "Public Shared Operator <<(${1:left} As ${2:ThisName}, ${3:count} As Integer)",
      "\t${0}",
      "End Operator"
    ],
    "description": "<< operator overloading"
  },
  "<= operator overloading": {
    "prefix": "oo_LessThanEquals",
    "body": [
      "Public Shared Operator <=(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator >=(${1} As ${2}, ${3} As ${2})",
      "End Operator"
    ],
    "description": "<= operator overloading"
  },
  "= operator overloading": {
    "prefix": "oo_Equals",
    "body": [
      "Public Shared Operator =(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator <>(${1} As ${2}, ${3} As ${2})",
      "\tReturn Not(${1} = ${3})",
      "End Operator"
    ],
    "description": "= operator overloading"
  },
  "> operator overloading": {
    "prefix": "oo_GreaterThan",
    "body": [
      "Public Shared Operator >(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator <(${1} As ${2}, ${3} As ${2})",
      "End Operator"
    ],
    "description": "> operator overloading"
  },
  ">= operator overloading": {
    "prefix": "oo_GreaterThanEquals",
    "body": [
      "Public Shared Operator >=(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator <=(${1} As ${2}, ${3} As ${2})",
      "End Operator"
    ],
    "description": ">= operator overloading"
  },
  ">> operator overloading": {
    "prefix": "oo_GreaterThanGreaterThan",
    "body": [
      "Public Shared Operator >>(${1:left} As ${2:ThisName}, ${3:count} As Integer)",
      "\t${0}",
      "End Operator"
    ],
    "description": ">> operator overloading"
  },
  "And operator overloading": {
    "prefix": "oo_And",
    "body": [
      "Public Shared Operator And(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "And operator overloading"
  },
  "array variable": {
    "prefix": "va",
    "body": [
      "Dim ${1:items} = New ${2:T}(${3:0}){}${0}"
    ],
    "description": "array variable declaration"
  },
  "array variable (with initializer)": {
    "prefix": "vax",
    "body": [
      "Dim ${1:items} = New ${2:T}() {${3:Nothing}}${0}"
    ],
    "description": "array variable declaration (with initializer)"
  },
  "Attribute class": {
    "prefix": "c_Attribute",
    "body": [
      "<AttributeUsage(AttributeTargets${1:.All}, AllowMultiple:=${2:False})>",
      "${3:Public NotInheritable} Class ${4:My}Attribute",
      "\tInherits ${5:Attribute}",
      "\t${0}",
      "End Class"
    ],
    "description": "class derived from Attribute"
  },
  "Boolean variable": {
    "prefix": "vb",
    "body": [
      "Dim ${1:f} As Boolean = ${2:False}${0}"
    ],
    "description": "Boolean variable declaration"
  },
  "Catch clause": {
    "prefix": "catch",
    "body": [
      "Catch ${1:ex} As ${2:Exception}",
      "\t${0}"
    ],
    "description": "Catch clause"
  },
  "Collection(Of T) class": {
    "prefix": "c_CollectionOfT",
    "body": [
      "${1:Public} Class ${2:Collection}",
      "\tInherits Collection(Of ${3:Object})",
      "",
      "\tPublic Sub New()",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(list As IList(Of ${3}))",
      "\t\tMyBase.New(list)",
      "\tEnd Sub",
      "\t${0}",
      "",
      "End Class"
    ],
    "description": "class derived from Collection(Of T)"
  },
  "CType operator": {
    "prefix": "t",
    "body": [
      "CType(${1:x}, ${2:Object})${0}"
    ],
    "description": "CType operator"
  },
  "CType operator overloading": {
    "prefix": "oo_CType",
    "body": [
      "Public Shared Widening Operator CType(ByVal ${1:value} As ${2:ThisName}) As ${3:Object}",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Narrowing Operator CType(ByVal ${1} As ${3}) As ${2}",
      "End Operator"
    ],
    "description": "CType operator overloading"
  },
  "DateTime type": {
    "prefix": "dt",
    "body": [
      "DateTime${0}"
    ],
    "description": "DateTime type"
  },
  "Debug.Assert": {
    "prefix": "da",
    "body": [
      "Debug.Assert(${1:False}, ${2:\"\"})${0}"
    ],
    "description": "Debug.Assert method"
  },
  "Debug.WriteLine": {
    "prefix": "dw",
    "body": [
      "Debug.WriteLine(${1:\"\"})${0}"
    ],
    "description": "Debug.WriteLine method"
  },
  "Dictionary(Of TKey, TValue) class": {
    "prefix": "c_DictionaryOfTKeyTValue",
    "body": [
      "${1:Public} Class ${2:Dictionary}",
      "\tInherits Dictionary(Of ${3:Object}, ${4:Object})",
      "",
      "\tPublic Sub New()",
      "\t\tMyBase.New()",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(capacity As Integer)",
      "\t\tMyBase.New(capacity)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(comparer As IEqualityComparer(Of ${3}))",
      "\t\tMyBase.New(comparer)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(dictionary As IDictionary(Of ${3}, ${4}))",
      "\t\tMyBase.New(dictionary)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(capacity As Integer, comparer As IEqualityComparer(Of ${3}))",
      "\t\tMyBase.New(capacity, comparer)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(info As SerializationInfo, context As StreamingContext)",
      "\t\tMyBase.New(info, context)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(dictionary As IDictionary(Of ${3}, ${4}), comparer As IEqualityComparer(Of ${3}))",
      "\t\tMyBase.New(dictionary, comparer)",
      "\tEnd Sub",
      "",
      "\t${0}",
      "End Class"
    ],
    "description": "class derived from Dictionary(Of TKey, TValue)"
  },
  "Disposable class": {
    "prefix": "c_Disposable",
    "body": [
      "${1:Public} Class ${2:ClassName}",
      "\tImplements IDisposable",
      "",
      "\tPrivate _disposed As Boolean",
      "",
      "\tPublic Sub Dispose() Implements IDisposable.Dispose",
      "",
      "\t\tDispose(True)",
      "\t\tGC.SuppressFinalize(Me)",
      "",
      "\tEnd Sub",
      "",
      "\tProtected Overridable Sub Dispose(disposing As Boolean)",
      "",
      "\t\tIf Not _disposed Then",
      "",
      "\t\t\tIf disposing Then",
      "\t\t\t\tThrow New NotImplementedException()",
      "\t\t\tEnd If",
      "",
      "\t\t\t_disposed = True",
      "",
      "\t\tEnd If",
      "",
      "\tEnd Sub",
      "",
      "End Class${0}"
    ],
    "description": "class that implements IDisposable interface"
  },
  "Dispose": {
    "prefix": "dispose",
    "body": [
      "Private _disposed As Boolean",
      "",
      "Public Sub Dispose()",
      "",
      "\tDispose(True)",
      "\tGC.SuppressFinalize(Me)",
      "",
      "End Sub",
      "",
      "Protected Overridable Sub Dispose(disposing As Boolean)",
      "",
      "\tIf Not _disposed Then",
      "\t\tIf disposing Then",
      "\t\t\tThrow New NotImplementedException()",
      "\t\tEnd If",
      "\t\t_disposed = True",
      "\tEnd If",
      "",
      "End Sub${0}"
    ],
    "description": "Dispose pattern"
  },
  "Do statement": {
    "prefix": "do",
    "body": [
      "Do",
      "\t${0}",
      "Loop"
    ],
    "description": "Do statement"
  },
  "Else clause": {
    "prefix": "e",
    "body": [
      "Else",
      "\t${TM_SELECTED_TEXT}${0}"
    ],
    "description": "Else clause"
  },
  "ElseIf": {
    "prefix": "eif",
    "body": [
      "ElseIf ${1:True} Then",
      "\t${0}"
    ],
    "description": "ElseIf statement"
  },
  "Equals and GetHashCode": {
    "prefix": "equals",
    "body": [
      "Public Overrides Function Equals(obj As object) As Boolean",
      "",
      "\tDim other = Nothing",
      "\tIf TryCast(other, ${1:ThisName}) Is Nothing Then",
      "\t\tReturn False",
      "\tEnd If",
      "",
      "\t${0}",
      "\tThrow New NotImplementedException()",
      "",
      "End Function",
      "",
      "Public Overrides Function GetHashCode() As Integer",
      "\tThrow New NotImplementedException()",
      "End Function"
    ],
    "description": "overriding Equals and GetHashCode methods"
  },
  "Exception class": {
    "prefix": "c_Exception",
    "body": [
      "<Serializable>",
      "${1:Public} Class ${2:My}Exception",
      "\tInherits ${3:Exception}",
      "",
      "\tPublic Sub New()",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(message As String)",
      "\t\tMyBase.New(message)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(message As String, inner As Exception)",
      "\t\tMyBase.New(message, inner)",
      "\tEnd Sub",
      "",
      "\tProtected Sub New(info As SerializationInfo, context As StreamingContext)",
      "\t\tMyBase.New(info, context)",
      "\tEnd Sub${0}",
      "",
      "End Class"
    ],
    "description": "class derived from Exception"
  },
  "For Each statement": {
    "prefix": "fe",
    "body": [
      "For Each ${1:item} In ${2:items}",
      "\t${0}",
      "Next"
    ],
    "description": "For Each statement"
  },
  "For statement": {
    "prefix": "fr",
    "body": [
      "For ${1:i} = 0 To ${2:length} - 1",
      "\t${0}",
      "Next"
    ],
    "description": "For statement"
  },
  "For statement (reversed)": {
    "prefix": "frr",
    "body": [
      "For ${1:i} = ${2:length} - 1 To 0 Step -1",
      "\t${0}",
      "Next"
    ],
    "description": "For statement (reversed)"
  },
  "Friend auto property": {
    "prefix": "ip",
    "body": [
      "Friend Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Friend auto-implemented property declaration"
  },
  "Friend class": {
    "prefix": "ic",
    "body": [
      "Friend Class ${1:ClassName}",
      "\t${0}",
      "End Class"
    ],
    "description": "Friend class declaration"
  },
  "Friend constant": {
    "prefix": "ik",
    "body": [
      "Friend Const ${1:ConstantName} As ${2:T} = ${3:Nothing}${0}"
    ],
    "description": "Friend constant declaration"
  },
  "Friend constructor": {
    "prefix": "ico",
    "body": [
      "Friend Sub New(${1:parameter As T})",
      "\t${0}",
      "End Sub"
    ],
    "description": "Friend constructor declaration"
  },
  "Friend delegate": {
    "prefix": "ide",
    "body": [
      "Friend Delegate Function ${1:DelegateName}(${2:parameter As T}) As ${3:void}${0}"
    ],
    "description": "Friend delegate declaration"
  },
  "Friend enum": {
    "prefix": "ien",
    "body": [
      "Friend Enum ${1:EnumName}",
      "\t${0}",
      "End Enum"
    ],
    "description": "Friend enum declaration"
  },
  "Friend event": {
    "prefix": "iev_EventHandler",
    "body": [
      "Friend Event ${1:EventName} As EventHandler(Of ${2:EventArgs})",
      "",
      "Protected Overridable Sub On${1}(${3:e} As ${2})",
      "\tRaiseEvent ${1}(Me, ${3})",
      "End Sub${0}"
    ],
    "description": "Friend event declaration"
  },
  "Friend indexer": {
    "prefix": "iin",
    "body": [
      "Default Friend Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\t${0}",
      "\tEnd Get",
      "\tSet(ByVal Value As ${2})",
      "\tEnd Set",
      "End Property"
    ],
    "description": "Friend indexer declaration"
  },
  "Friend interface": {
    "prefix": "iie",
    "body": [
      "Friend Interface ${1:InterfaceName}",
      "\t${0}",
      "End Interface"
    ],
    "description": "Friend interface declaration"
  },
  "Friend method": {
    "prefix": "im",
    "body": [
      "Friend Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Friend method declaration"
  },
  "Friend module": {
    "prefix": "imo",
    "body": [
      "Friend Module ${1:ModuleName}",
      "\t${0}",
      "End Module"
    ],
    "description": "Friend module declaration"
  },
  "Friend Overridable auto property": {
    "prefix": "ivp",
    "body": [
      "Friend Overridable Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Friend Overridable auto-implemented property declaration"
  },
  "Friend Overridable method": {
    "prefix": "ivm",
    "body": [
      "Friend Overridable Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Friend Overridable method declaration"
  },
  "Friend Overridable read-only auto property": {
    "prefix": "ivrp",
    "body": [
      "Friend Overridable ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Friend Overridable read-only auto-implemented property declaration"
  },
  "Friend Overridable read-only Property": {
    "prefix": "ivrpp",
    "body": [
      "Friend Overridable ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Friend Overridable read-only property declaration"
  },
  "Friend read-only auto property": {
    "prefix": "irp",
    "body": [
      "Friend ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Friend read-only auto-implemented property declaration"
  },
  "Friend read-only field": {
    "prefix": "irf",
    "body": [
      "Friend ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Friend read-only field declaration"
  },
  "Friend read-only indexer": {
    "prefix": "irin",
    "body": [
      "Default Friend Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Friend read-only indexer declaration"
  },
  "Friend read-only Property": {
    "prefix": "irpp",
    "body": [
      "Friend ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Friend read-only property declaration"
  },
  "Friend Shared method": {
    "prefix": "ism",
    "body": [
      "Friend Shared Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Friend Shared method declaration"
  },
  "Friend Shared read-only auto property": {
    "prefix": "isrp",
    "body": [
      "Friend Shared ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Friend Shared read-only auto-implemented property declaration"
  },
  "Friend Shared read-only field": {
    "prefix": "isrf",
    "body": [
      "Friend Shared ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Friend Shared read-only field declaration"
  },
  "Friend Shared read-only Property": {
    "prefix": "isrpp",
    "body": [
      "Friend Shared ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Friend Shared read-only property declaration"
  },
  "Friend structure": {
    "prefix": "ist",
    "body": [
      "Friend Structure ${1:StructName}",
      "\t${0}",
      "End Structure"
    ],
    "description": "Friend structure declaration"
  },
  "GetType": {
    "prefix": "gt",
    "body": [
      "GetType(${1:Object})${0}"
    ],
    "description": "GetType operator"
  },
  "IComparer class": {
    "prefix": "c_IComparer",
    "body": [
      "${1:Public} Class ${2:Comparer}",
      "\tImplements IComparer",
      "",
      "\tPublic Function Compare(x As Object, y As Object) As Integer Implements IComparer.Compare",
      "",
      "\t\tIf Object.ReferenceEquals(x, y) Then",
      "\t\t\tReturn 0",
      "\t\tEnd If",
      "",
      "\t\tIf x Is Nothing Then",
      "\t\t\tReturn IIf(y Is Nothing, 0, -1)",
      "\t\tEnd If",
      "",
      "\t\tIf y Is Nothing Then",
      "\t\t\tReturn 1",
      "\t\tEnd If",
      "",
      "\t\tDim a = CType(x, ${3:Object})",
      "\t\tDim b = CType(y, ${3})",
      "",
      "\t\t${0}",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "End Class"
    ],
    "description": "class that implements IComparer"
  },
  "IComparer(Of T) class": {
    "prefix": "c_IComparerOfT",
    "body": [
      "${1:Public} Class ${2:Collection}",
      "\tImplements IComparer(Of ${3:Object})",
      "",
      "\tPublic Function Compare(x As ${3}, y As ${3}) As Integer Implements IComparer(Of ${3}).Compare",
      "",
      "\t\tIf Object.ReferenceEquals(x, y) Then",
      "\t\t\tReturn 0",
      "\t\tEnd If",
      "",
      "\t\tIf x Is Nothing Then",
      "\t\t\tReturn -1",
      "\t\tEnd If",
      "",
      "\t\tIf y Is Nothing Then",
      "\t\t\tReturn 1",
      "\t\tEnd If",
      "",
      "\t\t${0}",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "End Class"
    ],
    "description": "class that implements IComparer(Of T)"
  },
  "IEqualityComparer class": {
    "prefix": "c_IEqualityComparer",
    "body": [
      "${1:Public} Class ${2:EqualityComparer}",
      "\tImplements IEqualityComparer",
      "",
      "\tPublic Shadows Function Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals",
      "",
      "\t\tIf Object.ReferenceEquals(x, y) Then",
      "\t\t\tReturn True",
      "\t\tEnd If",
      "",
      "\t\tIf x Is Nothing OrElse y Is Nothing Then",
      "\t\t\tReturn False",
      "\t\tEnd If",
      "",
      "\t\tDim a = CType(x, ${3:Object})",
      "\t\tDim b = CType(y, ${3})",
      "",
      "\t\t${0}",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "\tPublic Shadows Function GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode",
      "",
      "\t\tIf obj Is Nothing Then",
      "\t\t\tReturn 0",
      "\t\tEnd If",
      "",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "End Class"
    ],
    "description": "class that implements IEqualityComparer"
  },
  "IEqualityComparer(Of T) class": {
    "prefix": "c_IEqualityComparerOfT",
    "body": [
      "${1:Public} Class ${2:EqualityComparer}",
      "\tInherits EqualityComparer(Of ${3:Object})",
      "",
      "\tPublic Overrides Function Equals(x As ${3}, y As ${3}) As Boolean",
      "",
      "\t\tIf Object.ReferenceEquals(x, y) Then",
      "\t\t\tReturn True",
      "\t\tEnd If",
      "",
      "\t\tIf x Is Nothing OrElse y Is Nothing Then",
      "\t\t\tReturn False",
      "\t\tEnd If",
      "",
      "\t\t${0}",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "\tPublic Overrides Function GetHashCode(obj As ${3}) As Integer",
      "",
      "\t\tIf obj Is Nothing Then",
      "\t\t\tReturn 0",
      "\t\tEnd If",
      "",
      "\t\tThrow New NotImplementedException()",
      "",
      "\tEnd Function",
      "",
      "End Class"
    ],
    "description": "class that implements IEqualityComparer(Of T)"
  },
  "If Is Nothing": {
    "prefix": "ifn",
    "body": [
      "If ${1:x} Is Nothing Then",
      "\t${0}",
      "End If"
    ],
    "description": "If Is Nothing"
  },
  "If IsNot Nothing": {
    "prefix": "ifxn",
    "body": [
      "If ${1:x} IsNot Nothing Then",
      "\t${0}",
      "End If"
    ],
    "description": "If IsNot Nothing"
  },
  "If Not": {
    "prefix": "ifx",
    "body": [
      "If Not ${1:x} Then",
      "\t${0}",
      "End If"
    ],
    "description": "If statement with condition whether the expression is equal to false"
  },
  "if not TryParse": {
    "prefix": "ifxtp",
    "body": [
      "Dim ${1:result} As ${2:T}",
      "If Not ${2}.TryParse(${3:value}, ${1})",
      "\t${0}",
      "End If"
    ],
    "description": "if statement with condition whether TryParse method returns false."
  },
  "If TryCast Is Nothing": {
    "prefix": "ifxtc",
    "body": [
      "Dim ${1:x} = Nothing",
      "\tIf TryCast(${1}, ${2:Object}) Is Nothing Then",
      "\t\t${0}",
      "\tEnd If"
    ],
    "description": "If TryCast Is Nothing"
  },
  "If TryCast IsNot Nothing": {
    "prefix": "iftc",
    "body": [
      "Dim ${1:x} = Nothing",
      "\tIf TryCast(${1}, ${2:Object}) IsNot Nothing Then",
      "\t\t${0}",
      "\tEnd If"
    ],
    "description": "If TryCast IsNot Nothing"
  },
  "if TryParse": {
    "prefix": "iftp",
    "body": [
      "Dim ${1:result} As ${2:T}",
      "If ${2}.TryParse(${3:value}, ${1})",
      "\t${0}",
      "End If"
    ],
    "description": "if statement with condition whether TryParse method returns true."
  },
  "Int32 variable": {
    "prefix": "vi",
    "body": [
      "Dim ${1:i} As Integer = ${2:0}${0}"
    ],
    "description": "Int32 variable declaration"
  },
  "interface event": {
    "prefix": "_ev",
    "body": [
      "Event ${1:EventName} As EventHandler(Of ${2:EventArgs})${0}"
    ],
    "description": "interface event declaration"
  },
  "interface indexer": {
    "prefix": "_in",
    "body": [
      "Default Property Item(${1:int index}) As ${2:T}${0}"
    ],
    "description": "interface indexer"
  },
  "interface method": {
    "prefix": "_m",
    "body": [
      "Function ${1:MethodName}(${2:parameter As T}) As ${3:void};${0}"
    ],
    "description": "interface method"
  },
  "interface property": {
    "prefix": "_p",
    "body": [
      "Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "interface property"
  },
  "interface read-only property": {
    "prefix": "_rp",
    "body": [
      "ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "interface read-only property"
  },
  "Is Nothing": {
    "prefix": "n",
    "body": [
      "${1:x} Is Nothing${0}"
    ],
    "description": "A condition whether the expression is Nothing"
  },
  "IsFalse operator overloading": {
    "prefix": "oo_IsFalse",
    "body": [
      "Public Shared Operator IsTrue(${1:value} As ${2:ThisName}) As Boolean",
      "End Operator",
      "",
      "Public Shared Operator IsFalse(${1} As ${2}) As Boolean",
      "\t${0}",
      "End Operator"
    ],
    "description": "IsFalse operator overloading"
  },
  "IsNot Nothing": {
    "prefix": "xn",
    "body": [
      "${1:x} IsNot Nothing${0}"
    ],
    "description": "A condition whether the expression is not Nothing"
  },
  "IsTrue operator overloading": {
    "prefix": "oo_IsTrue",
    "body": [
      "Public Shared Operator IsTrue(${1:value} As ${2:ThisName}) As Boolean",
      "\t${0}",
      "End Operator",
      "",
      "Public Shared Operator IsFalse(${1} As ${2}) As Boolean",
      "End Operator"
    ],
    "description": "IsTrue operator overloading"
  },
  "KeyValuePair type": {
    "prefix": "kvp",
    "body": [
      "KeyValuePair${0}"
    ],
    "description": "KeyValuePair type"
  },
  "KeyValuePair.Create method": {
    "prefix": "kvpc",
    "body": [
      "KeyValuePair.Create${0}"
    ],
    "description": "KeyValuePair.Create method"
  },
  "Lambda expression": {
    "prefix": "l",
    "body": [
      "Function(f) ${0}"
    ],
    "description": "Lambda expression"
  },
  "Lambda expression with 2 parameters": {
    "prefix": "l2",
    "body": [
      "Function(f, g) ${0}"
    ],
    "description": "Lambda expression with 2 parameters"
  },
  "Lambda expression without parameters": {
    "prefix": "l0",
    "body": [
      "Function() ${0}"
    ],
    "description": "Lambda expression without parameters"
  },
  "Like operator overloading": {
    "prefix": "oo_Like",
    "body": [
      "Public Shared Operator Like(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "Like operator overloading"
  },
  "local variable declaration": {
    "prefix": "v",
    "body": [
      "Dim ${1:x} = ${2:_}${0}"
    ],
    "description": "local variable declaration"
  },
  "local variable with DirectCast": {
    "prefix": "vt",
    "body": [
      "Dim ${1:x} = DirectCast(${2:_}, ${3:T})${0}"
    ],
    "description": "local variable declaration with DirectCast"
  },
  "Mod operator overloading": {
    "prefix": "oo_Mod",
    "body": [
      "Public Shared Operator Mod(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "Mod operator overloading"
  },
  "NameOf operator": {
    "prefix": "no",
    "body": [
      "NameOf(${1:value})${0}"
    ],
    "description": "Nameof operator"
  },
  "Not operator overloading": {
    "prefix": "oo_Not",
    "body": [
      "Public Shared Operator Not(${1:value} As ${2:ThisName})",
      "\t${0}",
      "End Operator"
    ],
    "description": "Not operator overloading"
  },
  "ObservableCollection(Of T) class": {
    "prefix": "c_ObservableCollectionOfT",
    "body": [
      "${1:Public} Class ${2:Collection}",
      "\tInherits ObservableCollection(Of ${3:Object})",
      "",
      "\tPublic Sub New()",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(collection As IEnumerable(Of ${3}))",
      "\t\tMyBase.New(collection)",
      "\tEnd Sub",
      "",
      "\tPublic Sub New(list As IList(Of ${3}))",
      "\t\tMyBase.New(list)",
      "\tEnd Sub",
      "",
      "\t${0}",
      "End Class"
    ],
    "description": "class derived from ObservableCollection(Of T)"
  },
  "Or operator overloading": {
    "prefix": "oo_Or",
    "body": [
      "Public Shared Operator Or(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "Or operator overloading"
  },
  "parameter array ": {
    "prefix": "pa",
    "body": [
      "ParamArray ${1:values} As ${2:T}()${0}"
    ],
    "description": "parameter array "
  },
  "Private auto property": {
    "prefix": "pp",
    "body": [
      "Private Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Private auto-implemented property declaration"
  },
  "Private class": {
    "prefix": "pc",
    "body": [
      "Private Class ${1:ClassName}",
      "\t${0}",
      "End Class"
    ],
    "description": "Private class declaration"
  },
  "Private constant": {
    "prefix": "pk",
    "body": [
      "Private Const ${1:ConstantName} As ${2:T} = ${3:Nothing}${0}"
    ],
    "description": "Private constant declaration"
  },
  "Private constructor": {
    "prefix": "pco",
    "body": [
      "Private Sub New(${1:parameter As T})",
      "\t${0}",
      "End Sub"
    ],
    "description": "Private constructor declaration"
  },
  "Private delegate": {
    "prefix": "pde",
    "body": [
      "Private Delegate Function ${1:DelegateName}(${2:parameter As T}) As ${3:void}${0}"
    ],
    "description": "Private delegate declaration"
  },
  "Private enum": {
    "prefix": "pen",
    "body": [
      "Private Enum ${1:EnumName}",
      "\t${0}",
      "End Enum"
    ],
    "description": "Private enum declaration"
  },
  "Private event": {
    "prefix": "pev_EventHandler",
    "body": [
      "Private Event ${1:EventName} As EventHandler(Of ${2:EventArgs})",
      "",
      "Protected Overridable Sub On${1}(${3:e} As ${2})",
      "\tRaiseEvent ${1}(Me, ${3})",
      "End Sub${0}"
    ],
    "description": "Private event declaration"
  },
  "Private field": {
    "prefix": "pf",
    "body": [
      "Private ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Private field declaration"
  },
  "Private indexer": {
    "prefix": "pin",
    "body": [
      "Default Private Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\t${0}",
      "\tEnd Get",
      "\tSet(ByVal Value As ${2})",
      "\tEnd Set",
      "End Property"
    ],
    "description": "Private indexer declaration"
  },
  "Private method": {
    "prefix": "pm",
    "body": [
      "Private Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Private method declaration"
  },
  "Private read-only auto property": {
    "prefix": "prp",
    "body": [
      "Private ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Private read-only auto-implemented property declaration"
  },
  "Private read-only field": {
    "prefix": "prf",
    "body": [
      "Private ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Private read-only field declaration"
  },
  "Private read-only indexer": {
    "prefix": "prin",
    "body": [
      "Default Private Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Private read-only indexer declaration"
  },
  "Private read-only Property": {
    "prefix": "prpp",
    "body": [
      "Private ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Private read-only property declaration"
  },
  "Private Shared field": {
    "prefix": "psf",
    "body": [
      "Private Shared ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Private Shared field declaration"
  },
  "Private Shared method": {
    "prefix": "psm",
    "body": [
      "Private Shared Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Private Shared method declaration"
  },
  "Private Shared read-only auto property": {
    "prefix": "psrp",
    "body": [
      "Private Shared ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Private Shared read-only auto-implemented property declaration"
  },
  "Private Shared read-only field": {
    "prefix": "psrf",
    "body": [
      "Private Shared ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Private Shared read-only field declaration"
  },
  "Private Shared read-only Property": {
    "prefix": "psrpp",
    "body": [
      "Private Shared ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Private Shared read-only property declaration"
  },
  "Private structure": {
    "prefix": "pst",
    "body": [
      "Private Structure ${1:StructName}",
      "\t${0}",
      "End Structure"
    ],
    "description": "Private structure declaration"
  },
  "Public auto property": {
    "prefix": "p",
    "body": [
      "Public Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Public auto-implemented property declaration"
  },
  "Public class": {
    "prefix": "c",
    "body": [
      "Public Class ${1:ClassName}",
      "\t${0}",
      "End Class"
    ],
    "description": "Public class declaration"
  },
  "Public constant": {
    "prefix": "k",
    "body": [
      "Public Const ${1:ConstantName} As ${2:T} = ${3:Nothing}${0}"
    ],
    "description": "Public constant declaration"
  },
  "Public constructor": {
    "prefix": "co",
    "body": [
      "Public Sub New(${1:parameter As T})",
      "\t${0}",
      "End Sub"
    ],
    "description": "Public constructor declaration"
  },
  "Public delegate": {
    "prefix": "de",
    "body": [
      "Public Delegate Function ${1:DelegateName}(${2:parameter As T}) As ${3:void}${0}"
    ],
    "description": "Public delegate declaration"
  },
  "Public enum": {
    "prefix": "en",
    "body": [
      "Public Enum ${1:EnumName}",
      "\t${0}",
      "End Enum"
    ],
    "description": "Public enum declaration"
  },
  "Public event": {
    "prefix": "ev_EventHandler",
    "body": [
      "Public Event ${1:EventName} As EventHandler(Of ${2:EventArgs})",
      "",
      "Protected Overridable Sub On${1}(${3:e} As ${2})",
      "\tRaiseEvent ${1}(Me, ${3})",
      "End Sub${0}"
    ],
    "description": "Public event declaration"
  },
  "Public field": {
    "prefix": "f",
    "body": [
      "Public ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Public field declaration"
  },
  "Public indexer": {
    "prefix": "in",
    "body": [
      "Default Public Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\t${0}",
      "\tEnd Get",
      "\tSet(ByVal Value As ${2})",
      "\tEnd Set",
      "End Property"
    ],
    "description": "Public indexer declaration"
  },
  "Public interface": {
    "prefix": "ie",
    "body": [
      "Public Interface ${1:InterfaceName}",
      "\t${0}",
      "End Interface"
    ],
    "description": "Public interface declaration"
  },
  "Public method": {
    "prefix": "m",
    "body": [
      "Public Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Public method declaration"
  },
  "Public module": {
    "prefix": "mo",
    "body": [
      "Public Module ${1:ModuleName}",
      "\t${0}",
      "End Module"
    ],
    "description": "Public module declaration"
  },
  "Public Overridable auto property": {
    "prefix": "vp",
    "body": [
      "Public Overridable Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Public Overridable auto-implemented property declaration"
  },
  "Public Overridable method": {
    "prefix": "vm",
    "body": [
      "Public Overridable Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Public Overridable method declaration"
  },
  "Public Overridable read-only auto property": {
    "prefix": "vrp",
    "body": [
      "Public Overridable ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Public Overridable read-only auto-implemented property declaration"
  },
  "Public Overridable read-only Property": {
    "prefix": "vrpp",
    "body": [
      "Public Overridable ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Public Overridable read-only property declaration"
  },
  "Public read-only auto property": {
    "prefix": "rp",
    "body": [
      "Public ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Public read-only auto-implemented property declaration"
  },
  "Public read-only field": {
    "prefix": "rf",
    "body": [
      "Public ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Public read-only field declaration"
  },
  "Public read-only indexer": {
    "prefix": "rin",
    "body": [
      "Default Public Property Item(${1:ByVal index As Integer}) As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Public read-only indexer declaration"
  },
  "Public read-only Property": {
    "prefix": "rpp",
    "body": [
      "Public ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Public read-only property declaration"
  },
  "Public Shared field": {
    "prefix": "sf",
    "body": [
      "Public Shared ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Public Shared field declaration"
  },
  "Public Shared method": {
    "prefix": "sm",
    "body": [
      "Public Shared Function ${1:MethodName}(${2:parameter As T}) As ${3:void}",
      "\t${0}",
      "End Function"
    ],
    "description": "Public Shared method declaration"
  },
  "Public Shared read-only auto property": {
    "prefix": "srp",
    "body": [
      "Public Shared ReadOnly Property ${1:PropertyName} As ${2:T}${0}"
    ],
    "description": "Public Shared read-only auto-implemented property declaration"
  },
  "Public Shared read-only field": {
    "prefix": "srf",
    "body": [
      "Public Shared ReadOnly ${1:FieldName} As ${2:T}${0}"
    ],
    "description": "Public Shared read-only field declaration"
  },
  "Public Shared read-only Property": {
    "prefix": "srpp",
    "body": [
      "Public Shared ReadOnly Property ${1:PropertyName} As ${2:T}",
      "\tGet",
      "\t\tReturn ${3:value}",
      "\tEnd Get",
      "End Property${0}"
    ],
    "description": "Public Shared read-only property declaration"
  },
  "Public structure": {
    "prefix": "st",
    "body": [
      "Public Structure ${1:StructName}",
      "\t${0}",
      "End Structure"
    ],
    "description": "Public structure declaration"
  },
  "ReadOnlyCollection(Of T) class": {
    "prefix": "c_ReadOnlyCollectionOfT",
    "body": [
      "${1:Public} Class ${2:Collection}",
      "\tInherits ReadOnlyCollection(Of ${3:Object})",
      "",
      "\tPublic Sub New(list As IList(Of ${3}))",
      "\t\tMyBase.New(list)",
      "\tEnd Sub",
      "",
      "\t${0}",
      "End Class"
    ],
    "description": "class derived from ReadOnlyCollection(Of T)"
  },
  "Return False": {
    "prefix": "ref",
    "body": [
      "Return False${0}"
    ],
    "description": "Return False"
  },
  "Return Nothing": {
    "prefix": "ren",
    "body": [
      "Return Nothing${0}"
    ],
    "description": "Return Nothing"
  },
  "Return True": {
    "prefix": "ret",
    "body": [
      "Return True${0}"
    ],
    "description": "Return True"
  },
  "Select Case statement": {
    "prefix": "sc",
    "body": [
      "Select Case ${1:expression}",
      "\t${0}",
      "End Select"
    ],
    "description": "Select Case statement"
  },
  "singleton class": {
    "prefix": "c_Singleton",
    "body": [
      "${1:Public NotInheritable} Class ${2:ClassName}",
      "",
      "\tPrivate Sub New()",
      "\tEnd Sub",
      "",
      "\tPublic Shared ReadOnly Property Instance As ${2} = ${3:value}",
      "",
      "End Class${0}"
    ],
    "description": "class that implements singleton pattern"
  },
  "static constructor": {
    "prefix": "sco",
    "body": [
      "Shared Sub New()",
      "\t${0}",
      "End Sub"
    ],
    "description": "static constructor"
  },
  "String variable": {
    "prefix": "vs",
    "body": [
      "Dim ${1:s} As String = ${2:Nothing}${0}"
    ],
    "description": "String variable declaration"
  },
  "String.IsNullOrEmpty": {
    "prefix": "sne",
    "body": [
      "String.IsNullOrEmpty(${1:s})${0}"
    ],
    "description": "String.IsNullOrEmpty method"
  },
  "String.IsNullOrEmpty = False": {
    "prefix": "xsne",
    "body": [
      "String.IsNullOrEmpty(${1:s}) = False${0}"
    ],
    "description": "String.IsNullOrEmpty = False"
  },
  "String.IsNullOrWhiteSpace": {
    "prefix": "snw",
    "body": [
      "String.IsNullOrWhiteSpace(${1:s})${0}"
    ],
    "description": "String.IsNullOrWhiteSpace method"
  },
  "String.IsNullOrWhiteSpace = False": {
    "prefix": "xsnw",
    "body": [
      "String.IsNullOrWhiteSpace(${1:s}) = False${0}"
    ],
    "description": "String.IsNullOrWhiteSpace = False"
  },
  "Throw New": {
    "prefix": "thn",
    "body": [
      "Throw New${0}"
    ],
    "description": "Throw New"
  },
  "Throw New ArgumentException": {
    "prefix": "thn_ae",
    "body": [
      "Throw New ArgumentException(${1:\"\"}, NameOf(${2:parameter}))${0}"
    ],
    "description": "Throw New ArgumentException"
  },
  "Throw New ArgumentNullException": {
    "prefix": "thn_ane",
    "body": [
      "Throw New ArgumentNullException(NameOf(${1:parameter}))${0}"
    ],
    "description": "Throw New ArgumentNullException"
  },
  "Throw New ArgumentOutOfRangeException": {
    "prefix": "thn_aoore",
    "body": [
      "Throw New ArgumentOutOfRangeException(NameOf(${1:parameter}), ${1}, ${2:\"\"})${0}"
    ],
    "description": "Throw New ArgumentOutOfRangeException"
  },
  "Throw New InvalidCastException": {
    "prefix": "thn_ice",
    "body": [
      "Throw New InvalidCastException(${1:\"\"})${0}"
    ],
    "description": "Throw New InvalidCastException"
  },
  "Throw New InvalidOperationException": {
    "prefix": "thn_ioe",
    "body": [
      "Throw New InvalidOperationException(${1:message})${0}"
    ],
    "description": "Throw New InvalidOperationException"
  },
  "Throw New NotImplementedException": {
    "prefix": "thn_nie",
    "body": [
      "Throw New NotImplementedException(${1:message})${0}"
    ],
    "description": "Throw New NotImplementedException"
  },
  "Throw New NotSupportedException": {
    "prefix": "thn_nse",
    "body": [
      "Throw New NotSupportedException(${1:message})${0}"
    ],
    "description": "Throw New NotSupportedException"
  },
  "Throw New ObjectDisposedException": {
    "prefix": "thn_ode",
    "body": [
      "Throw New ObjectDisposedException(${1:args})${0}"
    ],
    "description": "Throw New ObjectDisposedException"
  },
  "TODO comment": {
    "prefix": "td",
    "body": [
      "'TODO: ${0}"
    ],
    "description": "TODO comment"
  },
  "Try-Catch": {
    "prefix": "tc",
    "body": [
      "Try",
      "\t${TM_SELECTED_TEXT}${0}",
      "Catch ${1:ex} as ${2:Exception}",
      "\tThrow",
      "End Try"
    ],
    "description": "Try-Catch statement"
  },
  "Try-Catch-Finally": {
    "prefix": "tcf",
    "body": [
      "Try",
      "\t${TM_SELECTED_TEXT}${0}",
      "Catch ${1:ex} as ${2:Exception}",
      "\tThrow",
      "Finally",
      "End Try"
    ],
    "description": "Try-Catch-Finally statement"
  },
  "Try-Finally": {
    "prefix": "tf",
    "body": [
      "Try",
      "\t${TM_SELECTED_TEXT}${0}",
      "Finally",
      "End Try"
    ],
    "description": "Try-Finally statement"
  },
  "Using statement": {
    "prefix": "u",
    "body": [
      "Using ${1:disposable}",
      "\t${0}",
      "End Using"
    ],
    "description": "Using statement"
  },
  "While Is Nothing": {
    "prefix": "wen",
    "body": [
      "While ${1:x} Is Nothing",
      "\t${0}",
      "End While"
    ],
    "description": "While statement with condition whether an expression is nothing"
  },
  "While IsNot Nothing": {
    "prefix": "wexn",
    "body": [
      "While ${1:x} IsNot Nothing",
      "\t${0}",
      "End While"
    ],
    "description": "While statement with condition whether an expression is not nothing"
  },
  "While statement": {
    "prefix": "we",
    "body": [
      "While ${1:True}",
      "\t${0}",
      "End While"
    ],
    "description": "While statement"
  },
  "Xor operator overloading": {
    "prefix": "oo_Xor",
    "body": [
      "Public Shared Operator Xor(${1:left} As ${2:ThisName}, ${3:right} As ${2})",
      "\t${0}",
      "End Operator"
    ],
    "description": "Xor operator overloading"
  }
}