// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.IO;
using Snippetica.VisualStudio;

namespace Snippetica.CodeGeneration;

public static class XmlSnippetGenerator
{
    private static readonly Version _formatVersion = new(1, 1, 0);

    private const string CommentIdentifier = "comment";
    private const string ContentIdentifier = "content";
    private const string ElementNameIdentifier = "element";
    private const string AttributeIdentifier = "attribute";
    private const string AttributeNameIdentifier = "attribute";
    private const string AttributeValueIdentifier = "value";
    public const string CDataIdentifier = "__cdataEnd";

    private const string EndPlaceholder = "$end$";
    private const string SelectedPlaceholder = "$selected$";

    public const string ElementShortcut = "e";
    public const string AttributeShortcut = "a";
    public const string SelfClosingShortcut = "s";
    public const string ContentShortcut = "x";
    public const string CommentShortcut = "c";
    public const string RegionShortcut = "r";

    public static IEnumerable<Snippet> GenerateSnippets(Language language, bool generateHtmlEntities = false)
    {
        foreach (Snippet snippet in GenerateSnippets(generateHtmlEntities))
        {
            snippet.SnippetTypes = SnippetTypes.Expansion;

            if (!snippet.Code.Placeholders.Contains(SnippetPlaceholder.EndIdentifier))
                snippet.CodeText += $"${SnippetPlaceholder.EndIdentifier}$";

            if (snippet.Code.Placeholders.Contains(SnippetPlaceholder.SelectedIdentifier))
                snippet.SnippetTypes |= SnippetTypes.SurroundsWith;

            snippet.AddTag(KnownTags.AutoGenerated);
            snippet.Language = language;
            snippet.SetFilePath(Path.ChangeExtension(snippet.GetFilePath(), ".snippet"));
            snippet.FormatVersion = _formatVersion;

            yield return snippet;
        }
    }

    private static IEnumerable<Snippet> GenerateSnippets(bool generateHtmlEntities = false)
    {
        yield return CreateCommentSnippet();

        Snippet elementSnippet = CreateElementSnippet();

        var snippet = (Snippet)elementSnippet.Clone();
        snippet.RemovePlaceholders(AttributeIdentifier);
        ReplaceContentIdentifier(snippet, multiline: true);
        yield return snippet;

        snippet = (Snippet)elementSnippet.Clone();
        ReplaceContentIdentifier(snippet, multiline: true);
        yield return WithAttribute(snippet);

        snippet = (Snippet)elementSnippet.Clone();
        yield return WithContent(snippet);

        snippet = (Snippet)elementSnippet.Clone();
        yield return WithAttributeWithContent(snippet);

        snippet = CreateSelfClosingElementSnippet();
        snippet.RemovePlaceholders(AttributeIdentifier);
        snippet.SuffixShortcut(SelfClosingShortcut);
        yield return snippet;

        snippet = CreateSelfClosingElementSnippet();
        snippet = WithAttribute(snippet);
        snippet.SuffixShortcut(SelfClosingShortcut);
        yield return snippet;

        Snippet cdataSnippet = CreateCDataSnippetSnippet();
        snippet = (Snippet)cdataSnippet.Clone();
        ReplaceContentIdentifier(snippet);
        yield return snippet;

        snippet = (Snippet)cdataSnippet.Clone();
        yield return WithContent(snippet);

        if (generateHtmlEntities)
        {
            yield return CreateHtmlEntitySnippet("nbsp", "non-breaking space", "n", "NonBreakingSpace");
            yield return CreateHtmlEntitySnippet("lt", "less than", "l", "LessThan");
            yield return CreateHtmlEntitySnippet("gt", "greater than", "g", "GreaterThan");
            yield return CreateHtmlEntitySnippet("amp", "ampersand", "a", "Ampersand");
            yield return CreateHtmlEntitySnippet("quot", "double quotation mark", "d", "DoubleQuotationMark");
            yield return CreateHtmlEntitySnippet("apos", "single quotation mark (apostrophe)", "s", "SingleQuotationMark");
        }
    }

    private static void ReplaceContentIdentifier(Snippet snippet, bool multiline = false)
    {
        if (multiline)
        {
            snippet.ReplacePlaceholders(ContentIdentifier, $"\r\n\t{SelectedPlaceholder}{EndPlaceholder}\r\n");
        }
        else
        {
            snippet.ReplacePlaceholders(ContentIdentifier, SelectedPlaceholder + EndPlaceholder);
        }
    }

    private static Snippet CreateElementSnippet()
    {
        var s = new Snippet()
        {
            Title = "element",
            Shortcut = ElementShortcut
        };

        s.Description = s.Title;

        s.AddLiteral(CreateElementNameLiteral());

        s.AddLiteral(CreateContentLiteral());

        var b = new SnippetCodeBuilder();
        b.Append("<");
        b.AppendPlaceholder(ElementNameIdentifier);
        b.AppendPlaceholder(AttributeIdentifier);
        b.Append(">");
        b.AppendPlaceholder(ContentIdentifier);
        b.Append("</");
        b.AppendPlaceholder(ElementNameIdentifier);
        b.Append(">");

        s.CodeText = b.ToString();

        s.SetFilePath("Element");

        return s;
    }

    private static Snippet CreateSelfClosingElementSnippet()
    {
        var s = new Snippet()
        {
            Title = "self-closing element",
            Shortcut = ElementShortcut
        };

        s.Description = s.Title;

        s.AddLiteral(CreateElementNameLiteral());

        var b = new SnippetCodeBuilder();
        b.Append("<");
        b.AppendPlaceholder(ElementNameIdentifier);
        b.AppendPlaceholder(AttributeIdentifier);
        b.Append(" />");
        b.AppendEndPlaceholder();
        s.CodeText = b.ToString();

        s.SetFilePath("SelfClosingElement");

        return s;
    }

    private static Snippet CreateCommentSnippet()
    {
        var s = new Snippet()
        {
            Title = "comment",
            Shortcut = CommentShortcut
        };

        s.Description = s.Title;

        s.AddLiteral(CreateCommentLiteral());

        var b = new SnippetCodeBuilder();
        b.Append("<!-- ");
        b.AppendPlaceholder(SnippetPlaceholder.SelectedIdentifier);
        b.AppendPlaceholder(CommentIdentifier);
        b.Append(" -->");
        s.CodeText = b.ToString();

        s.SetFilePath("Comment");

        return s;
    }

    private static Snippet CreateCDataSnippetSnippet()
    {
        var s = new Snippet()
        {
            Title = "CDATA section",
            Shortcut = "cdata"
        };

        s.Description = s.Title;

        s.AddLiteral(new SnippetLiteral(CDataIdentifier) { DefaultValue = "]]>", IsEditable = false });

        s.AddLiteral(CreateContentLiteral());

        var b = new SnippetCodeBuilder();
        b.Append("<![CDATA[");
        b.AppendPlaceholder(ContentIdentifier);
        b.AppendPlaceholder(CDataIdentifier);
        s.CodeText = b.ToString();

        s.SetFilePath("CDataSection");

        return s;
    }

    private static Snippet WithAttribute(Snippet s)
    {
        s.SuffixTitle(" (with attribute)");
        s.SuffixShortcut(AttributeShortcut);
        s.SuffixDescription(" (with attribute)");

        AddAttributeLiteralsAndPlaceholders(s);

        if (s.Code.Placeholders.Contains(ContentIdentifier))
        {
            s.ReplacePlaceholders(SnippetPlaceholder.EndIdentifier, "");
            s.ReplacePlaceholders(ContentIdentifier, EndPlaceholder);
        }

        s.SuffixFileName("WithAttribute");

        return s;
    }

    private static Snippet WithContent(Snippet s)
    {
        s.SuffixTitle(" (with content)");
        s.SuffixShortcut(ContentShortcut);
        s.SuffixDescription(" (with content)");

        s.RemovePlaceholders(AttributeIdentifier);

        s.SuffixFileName("WithContent");

        return s;
    }

    private static Snippet WithAttributeWithContent(Snippet s)
    {
        s.SuffixTitle(" (with attribute, with content)");
        s.SuffixShortcut(AttributeShortcut + ContentShortcut);
        s.SuffixDescription(" (with attribute, with content)");

        AddAttributeLiteralsAndPlaceholders(s);

        s.SuffixFileName("WithAttributeWithContent");

        return s;
    }

    private static void AddAttributeLiteralsAndPlaceholders(Snippet s)
    {
        s.AddLiteral(CreateAttributeNameLiteral());
        s.AddLiteral(CreateAttributeValueLiteral());

        s.ReplacePlaceholders(AttributeIdentifier, $" ${AttributeNameIdentifier}$=\"${AttributeValueIdentifier}$\"");
    }

    private static SnippetLiteral CreateAttributeNameLiteral()
    {
        return new SnippetLiteral(AttributeNameIdentifier, "Attribute name", AttributeNameIdentifier);
    }

    private static SnippetLiteral CreateAttributeValueLiteral()
    {
        return new SnippetLiteral(AttributeValueIdentifier, "Attribute value", AttributeValueIdentifier);
    }

    private static SnippetLiteral CreateContentLiteral()
    {
        return new SnippetLiteral(ContentIdentifier, "Content", ContentIdentifier);
    }

    private static SnippetLiteral CreateElementNameLiteral()
    {
        return new SnippetLiteral(ElementNameIdentifier, "Element name", ElementNameIdentifier);
    }

    private static SnippetLiteral CreateCommentLiteral()
    {
        return new SnippetLiteral(CommentIdentifier, "Comment", CommentIdentifier);
    }

    private static Snippet CreateHtmlEntitySnippet(string entityName, string title, string shortcut, string fileName)
    {
        var s = new Snippet()
        {
            Title = title,
            Shortcut = "he" + shortcut
        };

        s.Description = s.Title;

        s.CodeText = "&" + entityName + ";";

        s.SetFilePath("HtmlEntity" + fileName);

        return s;
    }
}
