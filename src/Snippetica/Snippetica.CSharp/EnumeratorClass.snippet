<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippet Format="1.1.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>Enumerator class</Title>
    <Shortcut>c_</Shortcut>
    <Description>custom enumerator class</Description>
    <Author>Josef Pihrt</Author>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
    <Keywords>
      <Keyword>Meta-ExcludeFromDocs</Keyword>
      <Keyword>Meta-NonUniqueShortcut</Keyword>
      <Keyword>Meta-ShortcutSuffix Enumerator</Keyword>
    </Keywords>
  </Header>
  <Snippet>
    <Imports>
      <Import>
        <Namespace>System</Namespace>
      </Import>
      <Import>
        <Namespace>System.Collections</Namespace>
      </Import>
      <Import>
        <Namespace>System.Collections.Generic</Namespace>
      </Import>
      <Import>
        <Namespace>System.Diagnostics.CodeAnalysis</Namespace>
      </Import>
    </Imports>
    <Declarations>
      <Literal>
        <ID>elementType</ID>
        <ToolTip>Element type name</ToolTip>
        <Default>T</Default>
      </Literal>
      <Literal>
        <ID>type</ID>
        <ToolTip>Type name</ToolTip>
        <Default>TypeName</Default>
      </Literal>
      <Literal>
        <ID>variableName</ID>
        <ToolTip>Variable name</ToolTip>
        <Default>x</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
  <![CDATA[IEnumerator<$elementType$> IEnumerable<$elementType$>.GetEnumerator()
{
	return new EnumeratorImpl(this);
}

IEnumerator IEnumerable.GetEnumerator()
{
	return new EnumeratorImpl(this);
}

public Enumerator GetEnumerator()
{
	return new Enumerator(this);
}

[SuppressMessage("Performance", "CA1815")]
[SuppressMessage("Usage", "CA2231")]
public struct $end$Enumerator
{
	private $type$ _$variableName$;
	private $elementType$ _current;

	internal Enumerator($type$ $variableName$)
	{
		_$variableName$ = $variableName$;
		_current = null;
	}

	public bool MoveNext()
	{
		throw new NotImplementedException();
	}

	public $elementType$ Current
	{
		get { throw new NotImplementedException(); }
	}

	public void Reset()
	{
		_current = null;
	}

	public override bool Equals(object obj) => throw new NotSupportedException();

	public override int GetHashCode() => throw new NotSupportedException();
}

private class EnumeratorImpl : IEnumerator<$elementType$>
{
	private Enumerator _en;

	internal EnumeratorImpl($type$ $variableName$)
	{
		_en = new Enumerator($variableName$);
	}

	public $elementType$ Current => _en.Current;

	object IEnumerator.Current => _en.Current;

	public bool MoveNext() => _en.MoveNext();

	public void Reset() => _en.Reset();

	public void Dispose()
	{
	}
}]]></Code>
  </Snippet>
</CodeSnippet>