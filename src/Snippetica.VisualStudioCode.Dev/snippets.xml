<!--Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0.-->
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>alignas keyword</Title>
      <Shortcut>aa</Shortcut>
      <Description>alignas keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AlignAsKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[alignas$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>alignof keyword</Title>
      <Shortcut>ao</Shortcut>
      <Description>alignof keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AlignOfKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[alignof$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>bool variable</Title>
      <Shortcut>vb</Shortcut>
      <Description>bool variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BoolVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>f</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>false</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[bool $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>break statement</Title>
      <Shortcut>bs</Shortcut>
      <Description>break statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BreakStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[break;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>class with inline constructor/destructor</Title>
      <Shortcut>cil</Shortcut>
      <Description>class declaration with inline constructor/destructor</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ClassWithInlineConstructorDestructor</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Class name</ToolTip>
          <Default>ClassName</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[class $name$ {
public:
	$name$() {
	}

	~$name$() {
	}

private:
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>continue statement</Title>
      <Shortcut>cs</Shortcut>
      <Description>continue statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ContinueStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[continue;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>friend keyword</Title>
      <Shortcut>fd</Shortcut>
      <Description>friend keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name FriendKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[friend$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>int variable</Title>
      <Shortcut>vi</Shortcut>
      <Description>int variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IntVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>i</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[int $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>lambda expression (minimal)</Title>
      <Shortcut>lm</Shortcut>
      <Description>lambda expression (minimal)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LambdaExpressionMinimal</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>captures</ID>
          <ToolTip>List of captures</ToolTip>
          <Default>&amp;</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[[$captures$]($_parameters$) {
	$selected$$end$
};]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>noexcept keyword</Title>
      <Shortcut>ne</Shortcut>
      <Description>noexcept keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NoExceptKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[noexcept$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>operator keyword</Title>
      <Shortcut>or</Shortcut>
      <Description>operator keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OperatorKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[operator$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return false</Title>
      <Shortcut>rf</Shortcut>
      <Description>return false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return statement</Title>
      <Shortcut>rs</Shortcut>
      <Description>return statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return true</Title>
      <Shortcut>rt</Shortcut>
      <Description>return true</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>string type</Title>
      <Shortcut>s</Shortcut>
      <Description>string type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[std::string$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>string variable</Title>
      <Shortcut>vs</Shortcut>
      <Description>string variable</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>Value to assign</ToolTip>
          <Default>nullptr</Default>
        </Literal>
      </Declarations>
      <Code Language="Cpp"><![CDATA[std::string $identifier$ = $value$;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>thread_local keyword</Title>
      <Shortcut>tl</Shortcut>
      <Description>thread_local keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThreadLocalKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[thread_local$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>throw keyword</Title>
      <Shortcut>tw</Shortcut>
      <Description>throw keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[throw$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>typeid keyword</Title>
      <Shortcut>ti</Shortcut>
      <Description>typeid keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TypeIdKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[typeid$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>typename keyword</Title>
      <Shortcut>tn</Shortcut>
      <Description>typename keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TypeNameKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[typename$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>unsigned keyword</Title>
      <Shortcut>us</Shortcut>
      <Description>unsigned keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name UnsignedKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[unsigned$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>volatile keyword</Title>
      <Shortcut>ve</Shortcut>
      <Description>volatile keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name VolatileKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Cpp"><![CDATA[volatile$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Assembly attribute</Title>
      <Shortcut>aa</Shortcut>
      <Description>Assembly attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AssemblyAttribute</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>attribute</ID>
          <ToolTip>Attribute</ToolTip>
          <Default>Attribute</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[[assembly: $attribute$]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>await foreach statement</Title>
      <Shortcut>afe</Shortcut>
      <Description>await foreach statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name AwaitForEach</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_collection</ID>
          <ToolTip>Collection variable name</ToolTip>
          <Default>items</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier that represents the element in the collection</ToolTip>
          <Default>item</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[await foreach (var $identifier$ in $_collection$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>break statement</Title>
      <Shortcut>bk</Shortcut>
      <Description>break statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BreakStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[break;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (!string.IsNullOrEmpty)</Title>
      <Shortcut>copxsne</Shortcut>
      <Description>conditional operator with condition whether the string is not equal to null or empty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorNotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[(!string.IsNullOrEmpty($expression$)) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (!string.IsNullOrWhiteSpace)</Title>
      <Shortcut>copxsnw</Shortcut>
      <Description>conditional operator with condition whether the string is not equal to null or white-space</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorNotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[(!string.IsNullOrWhiteSpace($expression$)) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (string.IsNullOrEmpty)</Title>
      <Shortcut>copsne</Shortcut>
      <Description>conditional operator with condition whether the string is equal to null or empty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[(string.IsNullOrEmpty($expression$)) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>conditional operator (string.IsNullOrWhiteSpace)</Title>
      <Shortcut>copsnw</Shortcut>
      <Description>conditional operator with condition whether the string is equal to null or white-space</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ConditionalOperatorStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
        <Literal>
          <ID>false</ID>
          <ToolTip>False expression</ToolTip>
          <Default>false</Default>
        </Literal>
        <Literal>
          <ID>true</ID>
          <ToolTip>True expression</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[(string.IsNullOrWhiteSpace($expression$)) ? $true$ : $false$$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>continue statement</Title>
      <Shortcut>ce</Shortcut>
      <Description>continue statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ContinueStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[continue;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Assert is not null</Title>
      <Shortcut>daxn</Shortcut>
      <Description>Debug.Assert method with condition whether the expression is not equal to null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugAssertNotNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.Assert($expression$ is not null, $message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Debug.Fail</Title>
      <Shortcut>df</Shortcut>
      <Description>Debug.Fail method</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name DebugFail</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Diagnostics</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>message</ID>
          <ToolTip>The message text</ToolTip>
          <Default>""</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[Debug.Fail($message$);$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifentp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (Enum.TryParse($value$, out $result$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null return</Title>
      <Shortcut>ifnre</Shortcut>
      <Description>if equal to null return</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNullReturn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is null)
	return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null return default</Title>
      <Shortcut>ifnred</Shortcut>
      <Description>if equal to null return default</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNullReturnDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is null)
	return default;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null return false</Title>
      <Shortcut>ifnref</Shortcut>
      <Description>if equal to null return false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNullReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is null)
	return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null return null</Title>
      <Shortcut>ifnren</Shortcut>
      <Description>if equal to null return null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNullReturnNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is null)
	return null;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if equal to null return true</Title>
      <Shortcut>ifnret</Shortcut>
      <Description>if equal to null return true</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEqualToNullReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is null)
	return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>ifxentp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$type$ $result$;
if (!Enum.TryParse($value$, out $result$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null return</Title>
      <Shortcut>ifxnre</Shortcut>
      <Description>if not equal to null return</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNullReturn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is not null)
	return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null return default</Title>
      <Shortcut>ifxnred</Shortcut>
      <Description>if not equal to null return default</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNullReturnDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is not null)
	return default;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null return false</Title>
      <Shortcut>ifxnref</Shortcut>
      <Description>if not equal to null return false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNullReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is not null)
	return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null return null</Title>
      <Shortcut>ifxnren</Shortcut>
      <Description>if not equal to null return null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNullReturnNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is not null)
	return null;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not equal to null return true</Title>
      <Shortcut>ifxnret</Shortcut>
      <Description>if not equal to null return true</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEqualToNullReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$ is not null)
	return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not return</Title>
      <Shortcut>ifxre</Shortcut>
      <Description>if not return</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotReturn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$)
	return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not return default</Title>
      <Shortcut>ifxred</Shortcut>
      <Description>if not return default</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotReturnDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$)
	return default;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not return false</Title>
      <Shortcut>ifxref</Shortcut>
      <Description>if not return false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$)
	return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not return null</Title>
      <Shortcut>ifxren</Shortcut>
      <Description>if not return null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotReturnNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$)
	return null;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if not return true</Title>
      <Shortcut>ifxret</Shortcut>
      <Description>if not return true</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!$expression$)
	return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrEmpty</Title>
      <Shortcut>ifxsne</Shortcut>
      <Description>if !string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrEmpty($expression$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if !string.IsNullOrWhiteSpace</Title>
      <Shortcut>ifxsnw</Shortcut>
      <Description>if !string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (!string.IsNullOrWhiteSpace($expression$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not TryGetValue</Title>
      <Shortcut>ifxtgv</Shortcut>
      <Description>if statement with condition whether TryGetValue method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotTryGetValue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to get</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>The expression to get value from</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>key</ID>
          <ToolTip>The key of the value to get</ToolTip>
          <Default>key</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value associated with the specified key</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $value$;
if (!$identifier$.TryGetValue($key$, out $value$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if return</Title>
      <Shortcut>ifre</Shortcut>
      <Description>if return</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfReturn</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$)
	return;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if return default</Title>
      <Shortcut>ifred</Shortcut>
      <Description>if return default</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfReturnDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$)
	return default;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if return false</Title>
      <Shortcut>ifref</Shortcut>
      <Description>if return false</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfReturnFalse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$)
	return false;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if return null</Title>
      <Shortcut>ifren</Shortcut>
      <Description>if return null</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfReturnNull</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$)
	return null;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if return true</Title>
      <Shortcut>ifret</Shortcut>
      <Description>if return true</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfReturnTrue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>Expression to evaluate</ToolTip>
          <Default>true</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if ($expression$)
	return true;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrEmpty</Title>
      <Shortcut>ifsne</Shortcut>
      <Description>if string.IsNullOrEmpty</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfStringIsNullOrEmpty</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrEmpty($expression$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>if string.IsNullOrWhiteSpace</Title>
      <Shortcut>ifsnw</Shortcut>
      <Description>if string.IsNullOrWhiteSpace</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfStringIsNullOrWhiteSpace</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>expression</ID>
          <ToolTip>String expression</ToolTip>
          <Default>s</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[if (string.IsNullOrWhiteSpace($expression$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if TryGetValue</Title>
      <Shortcut>iftgv</Shortcut>
      <Description>if statement with condition whether TryGetValue method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfTryGetValue</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>The type of the value to get</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>The expression to get value from</ToolTip>
          <Default>x</Default>
        </Literal>
        <Literal>
          <ID>key</ID>
          <ToolTip>The key of the value to get</ToolTip>
          <Default>key</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value associated with the specified key</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $value$;
if ($identifier$.TryGetValue($key$, out $value$)) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title> local function</Title>
      <Shortcut>lf</Shortcut>
      <Description> local function declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name LocalFunction</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_parameters</ID>
          <ToolTip>List of parameters</ToolTip>
          <Default>T parameter</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Return type</ToolTip>
          <Default>void</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Method name</ToolTip>
          <Default>MethodName</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[$_type$ $name$($_parameters$) {
	$end$
}]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewArrayOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[$_arrayLength$]$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array (with initializer)</Title>
      <Shortcut>nax</Shortcut>
      <Description>new array (with initializer)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewArrayOfTWithInitializer</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
        <Literal>
          <ID>_value</ID>
          <Default>null</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[new $_type$[] { $_value$ }$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>override modifier</Title>
      <Shortcut>oe</Shortcut>
      <Description>override modifier</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name OverrideModifier</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[override$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return await</Title>
      <Shortcut>ra</Shortcut>
      <Description>return await</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnAwait</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return await $end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return default</Title>
      <Shortcut>red</Shortcut>
      <Description>return default statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnDefault</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return default;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>return new</Title>
      <Shortcut>rn</Shortcut>
      <Description>return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="CSharp"><![CDATA[var $identifier$ = new StringBuilder();$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>throw statement</Title>
      <Shortcut>th</Shortcut>
      <Description>throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[throw;$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>TimeSpan type</Title>
      <Shortcut>ts</Shortcut>
      <Description>TimeSpan type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TimeSpan</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Code Language="CSharp"><![CDATA[TimeSpan$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>yield return new</Title>
      <Shortcut>yrn</Shortcut>
      <Description>yield return new</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name YieldReturnNew</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="CSharp"><![CDATA[yield return new$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with class attribute</Title>
      <Shortcut>divcs</Shortcut>
      <Description>div with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name div_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div class="$class$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>div with id attribute</Title>
      <Shortcut>divid</Shortcut>
      <Description>div with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name div_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<div id="$id$">$end$</div>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>meta viewport</Title>
      <Shortcut>metavp</Shortcut>
      <Description>meta viewport</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name meta_viewport</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<meta name="viewport" content="width=device-width" />$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with class attribute</Title>
      <Shortcut>spancs</Shortcut>
      <Description>span with class attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name span_class</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>class</ID>
          <ToolTip>CSS class name</ToolTip>
          <Default>class</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span class="$class$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>span with id attribute</Title>
      <Shortcut>spanid</Shortcut>
      <Description>span with id attribute</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name span_id</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>id</ID>
          <ToolTip>CSS id value</ToolTip>
          <Default>id</Default>
        </Literal>
      </Declarations>
      <Code Language="Html"><![CDATA[<span id="$id$">$end$</span>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>table with sections</Title>
      <Shortcut>table2</Shortcut>
      <Description>table with sections</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name table_with_sections</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="Html"><![CDATA[<table>
	<caption>$end$</caption>
	<thead>
		<tr>
			<th></th>
		</tr>
	</thead>
	<tfoot>
		<tr>
			<td></td>
		</tr>
	</tfoot>
	<tbody>
		<tr>
			<td></td>
		</tr>
	</tbody>
</table>]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>bold italic</Title>
      <Shortcut>bi</Shortcut>
      <Description>bold italic</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name BoldItalic</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>content</ID>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Markdown"><![CDATA[**_$selected$$content$_**$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>italic bold</Title>
      <Shortcut>ib</Shortcut>
      <Description>italic bold</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ItalicBold</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>content</ID>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Markdown"><![CDATA[_**$selected$$content$**_$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>table with 1 column (without header)</Title>
      <Shortcut>twoh</Shortcut>
      <Description>table with 1 column (without header)</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name TableWithoutHeader</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>content</ID>
          <Default>x</Default>
        </Literal>
      </Declarations>
      <Code Language="Markdown"><![CDATA[<table>
<tr>
	<td>$content$</td>
</tr>
</table>$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>array type</Title>
      <Shortcut>a</Shortcut>
      <Description>array type</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ArrayOfTType</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[$_type$()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if Enum.TryParse</Title>
      <Shortcut>ifentp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns true.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Enum.TryParse($value$, $result$)
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>if not Enum.TryParse</Title>
      <Shortcut>ifxentp</Shortcut>
      <Description>if statement with condition whether Enum.TryParse method returns false.</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name IfNotEnumTryParse</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>result</ID>
          <ToolTip>The result</ToolTip>
          <Default>result</Default>
        </Literal>
        <Literal>
          <ID>type</ID>
          <ToolTip>The type of the value to parse</ToolTip>
          <Default>TEnum</Default>
        </Literal>
        <Literal>
          <ID>value</ID>
          <ToolTip>The value to parse</ToolTip>
          <Default>value</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $result$ As $type$
If Not Enum.TryParse($value$, $result$)
	$end$
End If]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>new array </Title>
      <Shortcut>na</Shortcut>
      <Description>new array </Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name NewArrayOfT</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>_arrayLength</ID>
          <ToolTip>Array length</ToolTip>
          <Default>0</Default>
        </Literal>
        <Literal>
          <ID>_type</ID>
          <ToolTip>Element type name</ToolTip>
          <Default>T</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[New $_type$($_arrayLength$){}$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Object keyword</Title>
      <Shortcut>o</Shortcut>
      <Description>Object keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ObjectKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Object$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Return keyword</Title>
      <Shortcut>r</Shortcut>
      <Description>Return keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ReturnKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Return$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>StringBuilder variable</Title>
      <Shortcut>vsb</Shortcut>
      <Description>StringBuilder variable declaration</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringBuilderVariable</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Imports>
        <Import>
          <Namespace>System.Text</Namespace>
        </Import>
      </Imports>
      <Declarations>
        <Literal>
          <ID>identifier</ID>
          <ToolTip>Identifier name</ToolTip>
          <Default>sb</Default>
        </Literal>
      </Declarations>
      <Code Language="VB"><![CDATA[Dim $identifier$ = New StringBuilder()$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>String keyword</Title>
      <Shortcut>s</Shortcut>
      <Description>String keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name StringKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[String$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Throw statement</Title>
      <Shortcut>th</Shortcut>
      <Description>Throw statement</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name ThrowStatement</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Throw$end$]]></Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.1.0">
    <Header>
      <Title>Yield keyword</Title>
      <Shortcut>y</Shortcut>
      <Description>Yield keyword</Description>
      <Author>Josef Pihrt</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Keywords>
        <Keyword>Meta-Name YieldKeyword</Keyword>
      </Keywords>
    </Header>
    <Snippet>
      <Code Language="VB"><![CDATA[Yield$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>