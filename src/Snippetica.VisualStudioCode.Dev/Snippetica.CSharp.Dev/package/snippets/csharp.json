{
  " local function": {
    "prefix": "lf",
    "body": [
      "${1:void} ${2:MethodName}(${3:T parameter}) {",
      "\t${0}",
      "}"
    ],
    "description": " local function declaration"
  },
  "array type": {
    "prefix": "a",
    "body": [
      "${1:T}[]${0}"
    ],
    "description": "array type"
  },
  "Assembly attribute": {
    "prefix": "ae_ay",
    "body": [
      "[assembly: ${1:Attribute}]${0}"
    ],
    "description": "Assembly attribute"
  },
  "attribute": {
    "prefix": "ae",
    "body": [
      "[${TM_SELECTED_TEXT}${0}]"
    ],
    "description": "attribute"
  },
  "break statement": {
    "prefix": "bk",
    "body": [
      "break;${0}"
    ],
    "description": "break statement"
  },
  "Conditional attribute": {
    "prefix": "ae_cl",
    "body": [
      "[Conditional(${1:\"DEBUG\"})]${0}"
    ],
    "description": "Conditional attribute"
  },
  "conditional operator (!string.IsNullOrEmpty)": {
    "prefix": "coxsne",
    "body": [
      "(!string.IsNullOrEmpty(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is not equal to null or empty"
  },
  "conditional operator (!string.IsNullOrWhiteSpace)": {
    "prefix": "coxsnw",
    "body": [
      "(!string.IsNullOrWhiteSpace(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is not equal to null or white-space"
  },
  "conditional operator (string.IsNullOrEmpty)": {
    "prefix": "cosne",
    "body": [
      "(string.IsNullOrEmpty(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is equal to null or empty"
  },
  "conditional operator (string.IsNullOrWhiteSpace)": {
    "prefix": "cosnw",
    "body": [
      "(string.IsNullOrWhiteSpace(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is equal to null or white-space"
  },
  "continue statement": {
    "prefix": "ce",
    "body": [
      "continue;${0}"
    ],
    "description": "continue statement"
  },
  "Debug.Assert != null": {
    "prefix": "daxn",
    "body": [
      "Debug.Assert(${1:x} != null, ${2:\"\"});${0}"
    ],
    "description": "Debug.Assert method with condition whether the expression is not equal to null"
  },
  "DebuggerDisplay attribute": {
    "prefix": "ae_dd",
    "body": [
      "[DebuggerDisplay(${1:\"{}\"})]${0}"
    ],
    "description": "DebuggerDisplay attribute"
  },
  "DebuggerStepThrough attribute": {
    "prefix": "ae_dst",
    "body": [
      "[DebuggerStepThrough]${0}"
    ],
    "description": "DebuggerStepThrough attribute"
  },
  "Directory.CreateDirectory": {
    "prefix": "iod_cd",
    "body": [
      "Directory.CreateDirectory(${1:path})${0}"
    ],
    "description": "Directory.CreateDirectory method."
  },
  "Directory.Delete": {
    "prefix": "iod_d",
    "body": [
      "Directory.Delete(${1:path}, recursive: ${2:true})${0}"
    ],
    "description": "Directory.Delete method."
  },
  "Directory.EnumerateDirectories": {
    "prefix": "iod_ed",
    "body": [
      "Directory.EnumerateDirectories(${1:path}, ${2:\"*\"}, SearchOption${3:.AllDirectories})${0}"
    ],
    "description": "Directory.EnumerateDirectories method."
  },
  "Directory.EnumerateFiles": {
    "prefix": "iod_ef",
    "body": [
      "Directory.EnumerateFiles(${1:path}, ${2:\"*\"}, SearchOption${3:.AllDirectories})${0}"
    ],
    "description": "Directory.EnumerateFiles method."
  },
  "Directory.Exists": {
    "prefix": "iod_e",
    "body": [
      "Directory.Exists(${1:path})${0}"
    ],
    "description": "Directory.Exists method."
  },
  "Directory.GetDirectories": {
    "prefix": "iod_gd",
    "body": [
      "Directory.GetDirectories(${1:path}, ${2:\"*\"}, SearchOption${3:.AllDirectories})${0}"
    ],
    "description": "Directory.GetDirectories method."
  },
  "Directory.GetFiles": {
    "prefix": "iod_gf",
    "body": [
      "Directory.GetFiles(${1:path}, ${2:\"*\"}, SearchOption${3:.AllDirectories})${0}"
    ],
    "description": "Directory.GetFiles method."
  },
  "Directory.Move": {
    "prefix": "iod_m",
    "body": [
      "Directory.Move(${1:sourceDirName}, ${2:destinationDirName})${0}"
    ],
    "description": "Directory.Move method."
  },
  "File Exists": {
    "prefix": "iof_e",
    "body": [
      "File.Exists(${1:path})${0}"
    ],
    "description": "File.Exists method."
  },
  "File.Copy": {
    "prefix": "iof_c",
    "body": [
      "File.Copy(${1:sourceFileName}, ${2:destinationFileName})${0}"
    ],
    "description": "File.Copy method."
  },
  "File.Delete": {
    "prefix": "iof_d",
    "body": [
      "File.Delete(${1:path})${0}"
    ],
    "description": "File.Delete method."
  },
  "File.Move": {
    "prefix": "iof_m",
    "body": [
      "File.Move(${1:sourceFileName}, ${2:destinationFileName})${0}"
    ],
    "description": "File.Move method."
  },
  "File.ReadAllLines": {
    "prefix": "iof_ral",
    "body": [
      "File.ReadAllLines(${1:path}, ${2:Encoding.UTF8})${0}"
    ],
    "description": "File.ReadAllLines method."
  },
  "File.ReadAllText": {
    "prefix": "iof_rat",
    "body": [
      "File.ReadAllText(${1:path}, ${2:Encoding.UTF8})${0}"
    ],
    "description": "File.ReadAllText method."
  },
  "File.ReadLines": {
    "prefix": "iof_rl",
    "body": [
      "File.ReadLines(${1:path}, ${2:Encoding.UTF8})${0}"
    ],
    "description": "File.ReadLines method."
  },
  "File.WriteAllLines": {
    "prefix": "iof_wal",
    "body": [
      "File.WriteAllLines(${1:path}, ${2:content}, ${3:Encoding.UTF8})${0}"
    ],
    "description": "File.WriteAllLines method."
  },
  "File.WriteAllText": {
    "prefix": "iof_wat",
    "body": [
      "File.WriteAllText(${1:path}, ${2:\"\"}, ${3:Encoding.UTF8})${0}"
    ],
    "description": "File.WriteAllText method."
  },
  "FileStream Variable": {
    "prefix": "u_fesm",
    "body": [
      "using (var ${1:fs} = new FileStream(${2:path}, FileMode${3:.OpenOrCreate})) {",
      "\t${0}",
      "}"
    ],
    "description": "FileStream variable declaration."
  },
  "Flags attribute": {
    "prefix": "ae_fs",
    "body": [
      "[Flags]${0}"
    ],
    "description": "Flags attribute"
  },
  "if !string.IsNullOrEmpty": {
    "prefix": "ifxsne",
    "body": [
      "if (!string.IsNullOrEmpty(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if !string.IsNullOrEmpty"
  },
  "if !string.IsNullOrWhiteSpace": {
    "prefix": "ifxsnw",
    "body": [
      "if (!string.IsNullOrWhiteSpace(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if !string.IsNullOrWhiteSpace"
  },
  "if Enum.TryParse": {
    "prefix": "ifemtp",
    "body": [
      "${1:TEnum} ${2:result};",
      "if (Enum.TryParse(${3:value}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns true."
  },
  "if equal to null return": {
    "prefix": "ifnre",
    "body": [
      "if (${1:x} == null)",
      "\treturn;${0}"
    ],
    "description": "if equal to null return"
  },
  "if equal to null return default": {
    "prefix": "ifnred",
    "body": [
      "if (${1:x} == null)",
      "\treturn default;${0}"
    ],
    "description": "if equal to null return default"
  },
  "if equal to null return false": {
    "prefix": "ifnref",
    "body": [
      "if (${1:x} == null)",
      "\treturn false;${0}"
    ],
    "description": "if equal to null return false"
  },
  "if equal to null return null": {
    "prefix": "ifnren",
    "body": [
      "if (${1:x} == null)",
      "\treturn null;${0}"
    ],
    "description": "if equal to null return null"
  },
  "if equal to null return true": {
    "prefix": "ifnret",
    "body": [
      "if (${1:x} == null)",
      "\treturn true;${0}"
    ],
    "description": "if equal to null return true"
  },
  "if not Enum.TryParse": {
    "prefix": "ifxemtp",
    "body": [
      "${1:TEnum} ${2:result};",
      "if (!Enum.TryParse(${3:value}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns false."
  },
  "if not equal to null return": {
    "prefix": "ifxnre",
    "body": [
      "if (${1:x} != null)",
      "\treturn;${0}"
    ],
    "description": "if not equal to null return"
  },
  "if not equal to null return default": {
    "prefix": "ifxnred",
    "body": [
      "if (${1:x} != null)",
      "\treturn default;${0}"
    ],
    "description": "if not equal to null return default"
  },
  "if not equal to null return false": {
    "prefix": "ifxnref",
    "body": [
      "if (${1:x} != null)",
      "\treturn false;${0}"
    ],
    "description": "if not equal to null return false"
  },
  "if not equal to null return null": {
    "prefix": "ifxnren",
    "body": [
      "if (${1:x} != null)",
      "\treturn null;${0}"
    ],
    "description": "if not equal to null return null"
  },
  "if not equal to null return true": {
    "prefix": "ifxnret",
    "body": [
      "if (${1:x} != null)",
      "\treturn true;${0}"
    ],
    "description": "if not equal to null return true"
  },
  "if not return": {
    "prefix": "ifxre",
    "body": [
      "if (!${1:x})",
      "\treturn;${0}"
    ],
    "description": "if not return"
  },
  "if not return default": {
    "prefix": "ifxred",
    "body": [
      "if (!${1:x})",
      "\treturn default;${0}"
    ],
    "description": "if not return default"
  },
  "if not return false": {
    "prefix": "ifxref",
    "body": [
      "if (!${1:x})",
      "\treturn false;${0}"
    ],
    "description": "if not return false"
  },
  "if not return null": {
    "prefix": "ifxren",
    "body": [
      "if (!${1:x})",
      "\treturn null;${0}"
    ],
    "description": "if not return null"
  },
  "if not return true": {
    "prefix": "ifxret",
    "body": [
      "if (!${1:x})",
      "\treturn true;${0}"
    ],
    "description": "if not return true"
  },
  "if not TryGetValue": {
    "prefix": "ifxtgv",
    "body": [
      "${1:T} ${2:value};",
      "if (!${3:x}.TryGetValue(${4:key}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether TryGetValue method returns false."
  },
  "if return": {
    "prefix": "ifre",
    "body": [
      "if (${1:true})",
      "\treturn;${0}"
    ],
    "description": "if return"
  },
  "if return default": {
    "prefix": "ifred",
    "body": [
      "if (${1:true})",
      "\treturn default;${0}"
    ],
    "description": "if return default"
  },
  "if return false": {
    "prefix": "ifref",
    "body": [
      "if (${1:true})",
      "\treturn false;${0}"
    ],
    "description": "if return false"
  },
  "if return null": {
    "prefix": "ifren",
    "body": [
      "if (${1:true})",
      "\treturn null;${0}"
    ],
    "description": "if return null"
  },
  "if return true": {
    "prefix": "ifret",
    "body": [
      "if (${1:true})",
      "\treturn true;${0}"
    ],
    "description": "if return true"
  },
  "if string.IsNullOrEmpty": {
    "prefix": "ifsne",
    "body": [
      "if (string.IsNullOrEmpty(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if string.IsNullOrEmpty"
  },
  "if string.IsNullOrWhiteSpace": {
    "prefix": "ifsnw",
    "body": [
      "if (string.IsNullOrWhiteSpace(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if string.IsNullOrWhiteSpace"
  },
  "if TryGetValue": {
    "prefix": "iftgv",
    "body": [
      "${1:T} ${2:value};",
      "if (${3:x}.TryGetValue(${4:key}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether TryGetValue method returns true."
  },
  "MemoryStream Variable": {
    "prefix": "u_mysm",
    "body": [
      "using (var ${1:ms} = new MemoryStream(${2:0})) {",
      "\t${0}",
      "}"
    ],
    "description": "MemoryStream variable declaration."
  },
  "namespace": {
    "prefix": "ns",
    "body": [
      "namespace ${1:NamespaceName} {",
      "\t${TM_SELECTED_TEXT}${0}",
      "}"
    ],
    "description": "namespace declaration"
  },
  "new array ": {
    "prefix": "na",
    "body": [
      "new ${1:T}[${2:0}]${0}"
    ],
    "description": "new array "
  },
  "new array (with initializer)": {
    "prefix": "nax",
    "body": [
      "new ${1:T}[] { ${2:null} }${0}"
    ],
    "description": "new array (with initializer)"
  },
  "Obsolete attribute": {
    "prefix": "ae_oe",
    "body": [
      "[Obsolete(${1:\"\"})]${0}"
    ],
    "description": "Obsolete attribute"
  },
  "override modifier": {
    "prefix": "oe",
    "body": [
      "override${0}"
    ],
    "description": "override modifier"
  },
  "Path.Combine": {
    "prefix": "iop_c",
    "body": [
      "Path.Combine(${1:path1}, ${2:path2})${0}"
    ],
    "description": "Path.Combine method."
  },
  "Path.GetDirectoryName": {
    "prefix": "iop_gdn",
    "body": [
      "Path.GetDirectoryName(${1:path})${0}"
    ],
    "description": "Path.GetDirectoryName method."
  },
  "Path.GetExtension": {
    "prefix": "iop_ge",
    "body": [
      "Path.GetExtension(${1:path})${0}"
    ],
    "description": "Path.GetExtension method."
  },
  "Path.GetFileName": {
    "prefix": "iop_gfn",
    "body": [
      "Path.GetFileName(${1:path})${0}"
    ],
    "description": "Path.GetFileName method."
  },
  "Path.GetFileNameWithoutExtension": {
    "prefix": "iop_gfnwe",
    "body": [
      "Path.GetFileNameWithoutExtension(${1:path})${0}"
    ],
    "description": "Path.GetFileNameWithoutExtension method."
  },
  "Path.GetFullPath": {
    "prefix": "iop_gfp",
    "body": [
      "Path.GetFullPath(${1:path})${0}"
    ],
    "description": "Path.GetFullPath method."
  },
  "Path.HasExtension": {
    "prefix": "iop_he",
    "body": [
      "Path.HasExtension(${1:path})${0}"
    ],
    "description": "Path.HasExtension method."
  },
  "Path.ChangeExtension": {
    "prefix": "iop_ce",
    "body": [
      "Path.ChangeExtension(${1:path}, ${2:\"\"})${0}"
    ],
    "description": "Path.ChangeExtension method."
  },
  "return default": {
    "prefix": "red",
    "body": [
      "return default;${0}"
    ],
    "description": "return default statement"
  },
  "return new": {
    "prefix": "rn",
    "body": [
      "return new${0}"
    ],
    "description": "return new"
  },
  "return statement": {
    "prefix": "re",
    "body": [
      "return;${0}"
    ],
    "description": "return statement"
  },
  "StringBuilder variable": {
    "prefix": "vsb",
    "body": [
      "var ${1:sb} = new StringBuilder();${0}"
    ],
    "description": "StringBuilder variable declaration"
  },
  "throw statement": {
    "prefix": "tw",
    "body": [
      "throw;${0}"
    ],
    "description": "throw statement"
  },
  "variable declaration with as operator + if not null": {
    "prefix": "vasxn",
    "body": [
      "var ${1:x} = ${2:_} as ${3:T};",
      "if (${1} != null) {",
      "\t${0}",
      "}"
    ],
    "description": "variable declaration with as operator + condition whether the variable is not equal to null"
  },
  "yield return new": {
    "prefix": "yrn",
    "body": [
      "yield return new${0}"
    ],
    "description": "yield return new"
  }
}