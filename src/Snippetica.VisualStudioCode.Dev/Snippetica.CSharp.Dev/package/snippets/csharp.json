{
  " local function": {
    "prefix": "lf",
    "body": [
      "${1:void} ${2:MethodName}(${3:T parameter}) {",
      "\t${0}",
      "}"
    ],
    "description": " local function declaration"
  },
  "Assembly attribute": {
    "prefix": "aa",
    "body": [
      "[assembly: ${1:Attribute}]${0}"
    ],
    "description": "Assembly attribute"
  },
  "await foreach statement": {
    "prefix": "afe",
    "body": [
      "await foreach (var ${1:item} in ${2:items}) {",
      "\t${0}",
      "}"
    ],
    "description": "await foreach statement"
  },
  "break statement": {
    "prefix": "bk",
    "body": [
      "break;${0}"
    ],
    "description": "break statement"
  },
  "conditional operator (!string.IsNullOrEmpty)": {
    "prefix": "copxsne",
    "body": [
      "(!string.IsNullOrEmpty(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is not equal to null or empty"
  },
  "conditional operator (!string.IsNullOrWhiteSpace)": {
    "prefix": "copxsnw",
    "body": [
      "(!string.IsNullOrWhiteSpace(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is not equal to null or white-space"
  },
  "conditional operator (string.IsNullOrEmpty)": {
    "prefix": "copsne",
    "body": [
      "(string.IsNullOrEmpty(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is equal to null or empty"
  },
  "conditional operator (string.IsNullOrWhiteSpace)": {
    "prefix": "copsnw",
    "body": [
      "(string.IsNullOrWhiteSpace(${1:s})) ? ${2:true} : ${3:false}${0}"
    ],
    "description": "conditional operator with condition whether the string is equal to null or white-space"
  },
  "continue statement": {
    "prefix": "ce",
    "body": [
      "continue;${0}"
    ],
    "description": "continue statement"
  },
  "Debug.Assert is not null": {
    "prefix": "daxn",
    "body": [
      "Debug.Assert(${1:x} is not null, ${2:\"\"});${0}"
    ],
    "description": "Debug.Assert method with condition whether the expression is not equal to null"
  },
  "Debug.Fail": {
    "prefix": "df",
    "body": [
      "Debug.Fail(${1:\"\"});${0}"
    ],
    "description": "Debug.Fail method"
  },
  "if !string.IsNullOrEmpty": {
    "prefix": "ifxsne",
    "body": [
      "if (!string.IsNullOrEmpty(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if !string.IsNullOrEmpty"
  },
  "if !string.IsNullOrWhiteSpace": {
    "prefix": "ifxsnw",
    "body": [
      "if (!string.IsNullOrWhiteSpace(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if !string.IsNullOrWhiteSpace"
  },
  "if Enum.TryParse": {
    "prefix": "ifentp",
    "body": [
      "${1:TEnum} ${2:result};",
      "if (Enum.TryParse(${3:value}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns true."
  },
  "if equal to null return": {
    "prefix": "ifnre",
    "body": [
      "if (${1:x} is null)",
      "\treturn;${0}"
    ],
    "description": "if equal to null return"
  },
  "if equal to null return default": {
    "prefix": "ifnred",
    "body": [
      "if (${1:x} is null)",
      "\treturn default;${0}"
    ],
    "description": "if equal to null return default"
  },
  "if equal to null return false": {
    "prefix": "ifnref",
    "body": [
      "if (${1:x} is null)",
      "\treturn false;${0}"
    ],
    "description": "if equal to null return false"
  },
  "if equal to null return null": {
    "prefix": "ifnren",
    "body": [
      "if (${1:x} is null)",
      "\treturn null;${0}"
    ],
    "description": "if equal to null return null"
  },
  "if equal to null return true": {
    "prefix": "ifnret",
    "body": [
      "if (${1:x} is null)",
      "\treturn true;${0}"
    ],
    "description": "if equal to null return true"
  },
  "if not Enum.TryParse": {
    "prefix": "ifxentp",
    "body": [
      "${1:TEnum} ${2:result};",
      "if (!Enum.TryParse(${3:value}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether Enum.TryParse method returns false."
  },
  "if not equal to null return": {
    "prefix": "ifxnre",
    "body": [
      "if (${1:x} is not null)",
      "\treturn;${0}"
    ],
    "description": "if not equal to null return"
  },
  "if not equal to null return default": {
    "prefix": "ifxnred",
    "body": [
      "if (${1:x} is not null)",
      "\treturn default;${0}"
    ],
    "description": "if not equal to null return default"
  },
  "if not equal to null return false": {
    "prefix": "ifxnref",
    "body": [
      "if (${1:x} is not null)",
      "\treturn false;${0}"
    ],
    "description": "if not equal to null return false"
  },
  "if not equal to null return null": {
    "prefix": "ifxnren",
    "body": [
      "if (${1:x} is not null)",
      "\treturn null;${0}"
    ],
    "description": "if not equal to null return null"
  },
  "if not equal to null return true": {
    "prefix": "ifxnret",
    "body": [
      "if (${1:x} is not null)",
      "\treturn true;${0}"
    ],
    "description": "if not equal to null return true"
  },
  "if not return": {
    "prefix": "ifxre",
    "body": [
      "if (!${1:x})",
      "\treturn;${0}"
    ],
    "description": "if not return"
  },
  "if not return default": {
    "prefix": "ifxred",
    "body": [
      "if (!${1:x})",
      "\treturn default;${0}"
    ],
    "description": "if not return default"
  },
  "if not return false": {
    "prefix": "ifxref",
    "body": [
      "if (!${1:x})",
      "\treturn false;${0}"
    ],
    "description": "if not return false"
  },
  "if not return null": {
    "prefix": "ifxren",
    "body": [
      "if (!${1:x})",
      "\treturn null;${0}"
    ],
    "description": "if not return null"
  },
  "if not return true": {
    "prefix": "ifxret",
    "body": [
      "if (!${1:x})",
      "\treturn true;${0}"
    ],
    "description": "if not return true"
  },
  "if not TryGetValue": {
    "prefix": "ifxtgv",
    "body": [
      "${1:T} ${2:value};",
      "if (!${3:x}.TryGetValue(${4:key}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether TryGetValue method returns false."
  },
  "if return": {
    "prefix": "ifre",
    "body": [
      "if (${1:true})",
      "\treturn;${0}"
    ],
    "description": "if return"
  },
  "if return default": {
    "prefix": "ifred",
    "body": [
      "if (${1:true})",
      "\treturn default;${0}"
    ],
    "description": "if return default"
  },
  "if return false": {
    "prefix": "ifref",
    "body": [
      "if (${1:true})",
      "\treturn false;${0}"
    ],
    "description": "if return false"
  },
  "if return null": {
    "prefix": "ifren",
    "body": [
      "if (${1:true})",
      "\treturn null;${0}"
    ],
    "description": "if return null"
  },
  "if return true": {
    "prefix": "ifret",
    "body": [
      "if (${1:true})",
      "\treturn true;${0}"
    ],
    "description": "if return true"
  },
  "if string.IsNullOrEmpty": {
    "prefix": "ifsne",
    "body": [
      "if (string.IsNullOrEmpty(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if string.IsNullOrEmpty"
  },
  "if string.IsNullOrWhiteSpace": {
    "prefix": "ifsnw",
    "body": [
      "if (string.IsNullOrWhiteSpace(${1:s})) {",
      "\t${0}",
      "}"
    ],
    "description": "if string.IsNullOrWhiteSpace"
  },
  "if TryGetValue": {
    "prefix": "iftgv",
    "body": [
      "${1:T} ${2:value};",
      "if (${3:x}.TryGetValue(${4:key}, out ${2})) {",
      "\t${0}",
      "}"
    ],
    "description": "if statement with condition whether TryGetValue method returns true."
  },
  "new array ": {
    "prefix": "na",
    "body": [
      "new ${1:T}[${2:0}]${0}"
    ],
    "description": "new array "
  },
  "new array (with initializer)": {
    "prefix": "nax",
    "body": [
      "new ${1:T}[] { ${2:null} }${0}"
    ],
    "description": "new array (with initializer)"
  },
  "override modifier": {
    "prefix": "oe",
    "body": [
      "override${0}"
    ],
    "description": "override modifier"
  },
  "return await": {
    "prefix": "ra",
    "body": [
      "return await ${0}"
    ],
    "description": "return await"
  },
  "return default": {
    "prefix": "red",
    "body": [
      "return default;${0}"
    ],
    "description": "return default statement"
  },
  "return new": {
    "prefix": "rn",
    "body": [
      "return new${0}"
    ],
    "description": "return new"
  },
  "StringBuilder variable": {
    "prefix": "vsb",
    "body": [
      "var ${1:sb} = new StringBuilder();${0}"
    ],
    "description": "StringBuilder variable declaration"
  },
  "throw statement": {
    "prefix": "th",
    "body": [
      "throw;${0}"
    ],
    "description": "throw statement"
  },
  "TimeSpan type": {
    "prefix": "ts",
    "body": [
      "TimeSpan${0}"
    ],
    "description": "TimeSpan type"
  },
  "yield return new": {
    "prefix": "yrn",
    "body": [
      "yield return new${0}"
    ],
    "description": "yield return new"
  }
}